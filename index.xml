<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>钟灵毓秀</title>
    <link>https://tomorrowthief.github.io/</link>
    <description>Recent content on 钟灵毓秀</description>
    <image>
      <url>https://tomorrowthief.github.io/cover.png</url>
      <link>https://tomorrowthief.github.io/cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 11 May 2022 10:38:36 +0800</lastBuildDate><atom:link href="https://tomorrowthief.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>扩展性设计</title>
      <link>https://tomorrowthief.github.io/posts/extend-design/</link>
      <pubDate>Wed, 11 May 2022 10:38:36 +0800</pubDate>
      
      <guid>https://tomorrowthief.github.io/posts/extend-design/</guid>
      <description>前言 之前在公司内部做过「扩展性设计」的分享。后面重新整理形成博客形式记录自己的学习。
市面上有很多文章介绍扩展性设计了，有系统设计级别的，也有应用软件的。由于作者长期从事Web前端领域的工作的原因，本文也是基于这些技术领域发出的一些关于应用软件方向上的扩展性总结
什么是扩展性设计 软件架构设计里比较关注的几个要素：扩展性，稳定性，可维护性。很多领域里都会有这方面的考虑。比如：业务架构，产品架构，软件技术架构。那么具体怎么定义呢
 Extensibility is a software engineering and systems design principle where the implementation takes future growth into consideration
  扩展性是在考虑未来增长发展时所做的一些工程实践和系统设计原则
 引用自维基百科的定义
基础理论 这里讨论的理论基础是比较原始的，类似于数学或物理中的定律定理。实践中是要结合具体场景通过组合这里理论，以及基于这些理论做些推导来形成最佳的设计
 找到变化的东西 solid原则 分层明确  常用形式 中间件 中间件是一种实践比较成熟的形式了。基本的思想是根据一些约定拦截输入，做一些逻辑，或者修改挂载上下文，然后继续向下流。具体的形式上有
 洋葱模型中间件： koa2， redux 管道化模型的中间件：pipe  中间件实践中要考虑的因素是：
 中间件收集方式 中间件之间的关系，顺序等  插件 这种形式也比较常见。类似于微内核 + plugin/addon 模型。市面上也存在了很多基于此架构的工具或框架。此模式实践中要考虑的因素是：
 隔离性：暴露主应用的那些能力，防止插件的运行影响主应用逻辑 性能：进程模型设计，是否独立进程运行 生命周期：插件加载时机，插件执行时机 插件之间管理：插件之间是否能互相调用，互相影响   插件机制思想很简单，重要的是各种实现细节，实践中有不同形式与细节。这里日后单独写一篇文章来分析
 配置 读取配置文件，读取参数都是这种形式。是一种简单但实用的形式。不过多讨论
案例分析 webpack中的扩展性设计 webpack 是一个比较流行的打包工具。其功能的强大，生态的繁荣离不他的插件体系和loader体系。本身作为一个流程控制中心，很多功能都是分散在各个插件里来做的
loader体系 针对特定的文件类型来做处理的，有点类似上一节提到的管道化中间件模型。针对特定类型文件可以提供多个，按照顺序管道化的处理转换。</description>
    </item>
    
    <item>
      <title>深度思考</title>
      <link>https://tomorrowthief.github.io/posts/deep-thinking/</link>
      <pubDate>Mon, 18 Apr 2022 10:08:36 +0800</pubDate>
      
      <guid>https://tomorrowthief.github.io/posts/deep-thinking/</guid>
      <description>深度思考的重要性就不多强调了，该如何做好呢？
 如何做好深度思考？
 多维度 我这里说的多维度可以理解为多视角。
做一个技术分享，在听众的视角下如何的，主办方的视角如何，分享者的视角又如何，领导视角，同事视角如何……
多层次 一个事物是处于整体系统里的那一层，与其他层的依赖关系。都是可以考虑的
比如日常技术问题处理，问题本身是如何的，处理及反馈流程是如何的，技术依赖的其他系统大概如何的……
现象与本质 有哲学基础的都会知道，事物的发展变化都会有表现与本质的区别。这一点有点像我们使用技术框架时，能掌握好框架的使用层以及底层原理，才能以正确的姿势使用。
同样道理，思考问题的表现以及底层逻辑如何，才能做好深度思考。实际中可能会更加复杂：人的关系，系统的关系，技术本身的关系
刻意练习 所谓学而不思则茫，有了理论基础，加上一些刻意练习，才能真正掌握。具体落地点:
 多总结 多复盘 多积累方法论 多接触不同系统的案例  </description>
    </item>
    
    <item>
      <title>蛙泳学思</title>
      <link>https://tomorrowthief.github.io/posts/swim/</link>
      <pubDate>Fri, 15 Apr 2022 14:34:21 +0800</pubDate>
      
      <guid>https://tomorrowthief.github.io/posts/swim/</guid>
      <description>最近开始学习蛙泳，其实很早之前下水练习过几次，但是没有系统的整理。最近开始了系统性的练习：看了些视频讲解，纠正了些错误，总算有些小进步。
过程中发现了自己之前很多动作，模式，思考是不对的。但是纠正这些不对的点花费了很久时间。学习效率比较低。而纠正错误的技巧以及思路是一个通用的学习理论，对于工作，生活应该都适用。所以做了此快速学习新技能技巧的总结，或者称之为方法论也好。
学习速度 掌握好正确的路径，学习资料，其余的就是练习了。理论与实践相辅相承。在实践中遇到问题，可能是理论没有吃透，可以多补充。比如不知道动作该怎么连贯（划手蹬腿结合）的时候，可以补充下理论。理论充足不等于实践也厉害，因为都有个人，环境的因素。
所以 理论和实践结合 互相补充 来提速
基础比较关键 最重要的基础点是：
 划手 蹬腿 协调  切记欲速不达的道理： 我之前基础练习的不够好，蹬腿，划手导致在完整动作时漏洞百出，出了问题没有头绪，然后再回过头一点一点练习基础才能做好完整动作，这个过程就比较浪费时间了。 在看专业运动员每一个细节都特别好，大概就是基础比较扎实了吧。所以想要快速达到目标，不要忽视了基础。稳扎稳打可能是速度最快的方式
好的老师 个人在实践中总是会有很多点会偏离最优，有些思想也会偏离。有的时候会卡在某个环节出不来，这个时候如果自己有良好的资料可以参考，最好了。 比如我在呼气练习的时候，水下一直是哈气的动作，水上就不能很好的吸气了，知道看到有个解说提醒说水下吐气，才知道，这个环节练习错了。这个哈气矫正为吐气的过程是看了讲解。但是假如有个好教师帮忙点一二，可以快速解围解困惑的。
类似的工作中也比较强调有好的导师，好的领导的重要性，所谓读万卷书不如行万里路，不过阅人无数，不如良师指点。 所以如何发现好老师？正规的学习指南，学习资料是大家当前最合适的，有真人最好了。
最后发现总结的都是些大道理，这些大道理大家应该都懂，但是怎么与实际结合并帮助实践是比较关键的。
总结 本文通过个人蛙泳学习过程中遇到的问题做了些反思，总结了一些快速学习技能的通用技巧方法论。并强调这些大道理如何与实际结合的技巧才是关键。希望对做其他事情有帮助，也不枉这次辛苦练习了。最后学习的过程是没有银弹的，前进吧少年</description>
    </item>
    
    <item>
      <title>文章搬运开始啦</title>
      <link>https://tomorrowthief.github.io/posts/kaishila/</link>
      <pubDate>Thu, 14 Apr 2022 20:21:59 +0800</pubDate>
      
      <guid>https://tomorrowthief.github.io/posts/kaishila/</guid>
      <description>背景 最近比较空闲，在写作东西的时候发现一个不错的主题。刚好自己除了一些公共账号外，还没自己的博客，遂搭建之。
主题：基于Hugo，详细可以见网站底部。托管于 GitHub Pages。
博客内容 主要是搬移之前写过的一些东西，同时做了一些格式化处理。未来新写的东西应该会首先发到这里了
 菩提本无树，明镜亦非台，本来无一物，何处惹尘埃
 </description>
    </item>
    
    
    
    <item>
      <title>信息</title>
      <link>https://tomorrowthief.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tomorrowthief.github.io/about/</guid>
      <description>about</description>
    </item>
    
  </channel>
</rss>
