<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>架构 on 钟灵毓秀</title>
    <link>https://tomorrowthief.github.io/categories/%E6%9E%B6%E6%9E%84/</link>
    <description>Recent content in 架构 on 钟灵毓秀</description>
    <image>
      <url>https://tomorrowthief.github.io/cover.png</url>
      <link>https://tomorrowthief.github.io/cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 11 May 2022 10:38:36 +0800</lastBuildDate><atom:link href="https://tomorrowthief.github.io/categories/%E6%9E%B6%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>扩展性设计</title>
      <link>https://tomorrowthief.github.io/posts/extend-design/</link>
      <pubDate>Wed, 11 May 2022 10:38:36 +0800</pubDate>
      
      <guid>https://tomorrowthief.github.io/posts/extend-design/</guid>
      <description>前言 之前在公司内部做过「扩展性设计」的分享。后面重新整理形成博客形式记录自己的学习。
市面上有很多文章介绍扩展性设计了，有系统设计级别的，也有应用软件的。由于作者长期从事Web前端领域的工作的原因，本文也是基于这些技术领域发出的一些关于应用软件方向上的扩展性总结
什么是扩展性设计 软件架构设计里比较关注的几个要素：扩展性，稳定性，可维护性。很多领域里都会有这方面的考虑。比如：业务架构，产品架构，软件技术架构。那么具体怎么定义呢
 Extensibility is a software engineering and systems design principle where the implementation takes future growth into consideration
  扩展性是在考虑未来增长发展时所做的一些工程实践和系统设计原则
 引用自维基百科的定义
基础理论 这里讨论的理论基础是比较原始的，类似于数学或物理中的定律定理。实践中是要结合具体场景通过组合这里理论，以及基于这些理论做些推导来形成最佳的设计
 变化的东西 solid原则  常用形式 中间件 中间件是一种实践比较成熟的形式了。基本的思想是根据一些约定拦截输入，加入一些逻辑，然后继续向下流。比如
 洋葱模型中间件： koa2， redux 管道化模型的中间件：pipe  插件 这种形式也比较常见。类似于微内核 + plugin/addon 模型。市面上也存在了很多基于此架构的工具或框架。此模式实践中要考虑的因素是：
 隔离性：暴露主应用的那些能力，防止插件的运行影响主应用逻辑 性能：进程模型设计，是否独立进程运行 生命周期：插件加载时机，插件执行时机 插件之间管理：插件之间是否能互相调用，互相影响   插件机制内容还是比较多，实践中有不同形式与细节。这里日后单独写一篇文章来分析
 配置 读取配置文件，读取参数都是这种形式。是一种简单但实用的形式。不过多讨论
案例分析 webpack中的扩展性设计 webpack 是一个比较流行的打包工具。其功能的强大，生态的繁荣离不他的插件体系和loader体系。本身作为一个流程控制中心，很多功能都是分散在各个插件里来做的
loader体系 针对特定的文件类型来做处理的，有点类似上一节提到的管道化中间件模型。针对特定类型文件可以提供多个，按照顺序管道化的处理转换。
插件体系 webpack 内部主要的两个概念是 complier主要负责构建整体，compliton主要负责构建里的具体编译工作。
// 这里需要一个插件的demo babel 副作用 对，最大的副作用就是过度设计，无论何种设计都不是免费的。完美的扩展机制是需要考虑很多因素的，上文有一些分析。倘若为了尚不明确的问题做复杂的设计，可能得不偿失。</description>
    </item>
    
  </channel>
</rss>
