[{"content":"为什么要学 Python 最近开始接触 Ai 相关的东西。主要是应用层的内容，比如 RAG Agent 等。此类应用特点：无需太多安全性能，偏向于工具，这块技术发展变化比较迅速，大模型日新月异，应用层技术也跟随变化较多。\n根据此特点选择脚本类型语言作为应用层开发语言。待选语言有 Nodejs python。 个人虽熟悉 Nodejs，但鉴于 Python 生态较好 性能较好等，最后决定 Python。\nPython 综述 Python 第一版本发布于 2000年，目前在 Tiobe 排行榜里人数排名第一，社区热度也升为第一。\n定位：高级语言，通用能力编程语言 特性：动态语言，基于解释器，gc 等 范式：函数编程，面向对象，面向过程 主要在 数据处理，计算，Web等发挥作用，AI 领域使用很多， Web 开发也有很多场景\n运行模式支持 多进程，多线程，协程\n执行流程 这一章直接问了 gpt，下面都是 ai 的回答\n在Python中，程序的执行流程通常是按照以下步骤进行的：\n解释器读取源代码：Python解释器会逐行读取源代码文件，并将其转换为字节码形式，这是一种中间表示形式，可以被Python虚拟机执行。\n词法分析和语法分析：在这个阶段，Python解释器会将源代码分解成单词（Token）并构建语法树。这个过程包括词法分析（将源代码分解为Token）和语法分析（根据语法规则构建语法树）。\n编译字节码：Python解释器将语法树转换为字节码。字节码是一种中间形式，类似于机器码，但是不是针对特定的硬件架构。\n执行字节码：Python虚拟机执行字节码指令。这些指令会被逐条执行，从而实现程序的逻辑。\n动态类型检查：Python是一种动态类型语言，因此在运行时会进行类型检查。如果类型不匹配，会引发类型错误。\n垃圾回收：Python具有自动内存管理机制，包括垃圾回收。垃圾回收器会定期检查不再使用的内存对象，并释放它们。\n异常处理：在程序执行过程中，如果发生异常，Python会查找合适的异常处理程序。如果找不到合适的处理程序，程序会中止并打印错误信息。\n程序结束：当程序执行完所有的代码或遇到显式的退出语句（如return或sys.exit()）时，程序结束执行。\n语法 跟我熟悉的 JS 差别很大，总体感受很灵活。基础的比如：变量 循环，函数的定义参数。可以直接看官方文档\n个人感觉 1-2 周左右时间，即可上手基础开发。\n这里只提下我印象比较深刻的函数部分： 通过 def 定义，通过缩进写函数体，当然也可以添加类型系统，比如入参数类型，返回类型。基础demo如下\ndef add(num1, num2) return num1 + num2 sum = add(1, 2) print(sum) 函数参数可以用 * *key_yars 来动态接收\n异步编程 稍微复杂一点的逻辑都会离不开异步编程。而大多语言的异步编程通过事件循环来实现的。\n相比我比较熟悉的 Javascript 里浏览器和 Nodejs 运行时的模式，Python多少还是有点不同：\nPython 中的事件循环主要是通过 asyncio 模块来实现的。asyncio 是 Python 标准库中的一个模块，用于编写异步 I/O 代码。它提供了事件循环、任务、协程和各种异步 I/O 操作。\n基本概念 事件循环：管理和调度异步任务的核心组件。 协程：使用 async def 定义的函数，可以在事件循环中异步运行。 任务：由事件循环调度的协程对象。 Future：表示一个异步操作的最终结果，类似于 JavaScript 中的 Promise。 示例 以下是一个简单的示例，展示了如何使用 asyncio 模块来创建和运行事件循环：\nimport asyncio async def say_hello(): print(\u0026#39;Hello\u0026#39;) await asyncio.sleep(1) print(\u0026#39;World\u0026#39;) async def main(): await asyncio.gather(say_hello(), say_hello()) # 获取默认事件循环并运行主协程 asyncio.run(main()) 解释 定义协程：使用 async def 定义了一个名为 say_hello 的协程，它在打印 Hello 后等待 1 秒，然后打印 World。 主协程：定义了一个名为 main 的协程，它使用 asyncio.gather 并发地运行两个 say_hello 协程。 运行事件循环：使用 asyncio.run 获取默认事件循环并运行 main 协程。 事件循环的工作原理 启动事件循环：当调用 asyncio.run(main()) 时，事件循环启动并开始运行 main 协程。 调度任务：事件循环调度 main 协程中的任务。在这个例子中，asyncio.gather 会并发地运行两个 say_hello 协程。 处理 I/O 操作：当协程遇到 I/O 操作（如 await asyncio.sleep(1)），事件循环会挂起该协程并切换到其他可运行的任务。 完成任务：当 I/O 操作完成时，事件循环会恢复被挂起的协程并继续执行。 结束事件循环：当所有任务完成时，事件循环停止。 更复杂的示例 以下是一个更复杂的示例，展示了如何处理多个异步任务和超时：\nimport asyncio async def fetch_data(delay, name): print(f\u0026#39;Starting {name}\u0026#39;) await asyncio.sleep(delay) print(f\u0026#39;Finished {name}\u0026#39;) async def main(): task1 = asyncio.create_task(fetch_data(2, \u0026#39;Task 1\u0026#39;)) task2 = asyncio.create_task(fetch_data(3, \u0026#39;Task 2\u0026#39;)) task3 = asyncio.create_task(fetch_data(1, \u0026#39;Task 3\u0026#39;)) await asyncio.wait([task1, task2, task3], timeout=2.5) # 运行事件循环 asyncio.run(main()) 解释 创建任务：使用 asyncio.create_task 创建了三个任务，每个任务在不同的延迟后完成。 等待任务：使用 asyncio.wait 并设置超时时间为 2.5 秒。如果某些任务在超时时间内未完成，它们将被取消。 输出结果 Starting Task 1 Starting Task 2 Starting Task 3 Finished Task 3 Finished Task 1 在这个例子中，Task 2 因为超时而未能完成。\n处理超时 如果你需要处理超时，可以使用 asyncio.TimeoutError：\nasync def main(): try: await asyncio.wait_for(fetch_data(3, \u0026#39;Task 2\u0026#39;), timeout=2) except asyncio.TimeoutError: print(\u0026#39;Task 2 timed out\u0026#39;) asyncio.run(main()) 本章小节 Python 的 asyncio 模块提供了强大的工具来编写高效的异步 I/O 代码。通过理解事件循环、协程和任务的工作原理，可以更好地编写和调试异步 Python 程序。\n比较有意思的是， Javascript 里并没有提供事件循环的底层 API，而 Python 却提供了很多。从这点来看Python灵活性更好，在需要充分榨干 cpu 的场景中会有更好的表现，就像 C++ 提供了垃圾回收的低层级API，而 Java 则直接用Jvm 的 gc 机制来做，使得 c++ 性能更强，更灵活, 当然编写难度也会提升，实际技术选型时要综合考虑。\n优秀框架库 Web服务开发： Flask FastAPI 任务队列： Celery 总结 入门 python 还是比较容易。本文内容主要是我在做两个项目中 学习到的一些概念，知识点。感觉目前能成为一个中级 python 开发了。如果后面用了一些其他高级功能，再专题写一下具体的部分\n到了一定程度语言已经不是问题的关键了，怎么熟悉整个技术体系更重要，比如在Web服务开发领域：计算机组成，操组系统，编译原理，等基础概念，数据库，高并发，分布式这些架构。\n","permalink":"https://tomorrowthief.github.io/posts/ai-python/","summary":"为什么要学 Python 最近开始接触 Ai 相关的东西。主要是应用层的内容，比如 RAG Agent 等。此类应用特点：无需太多安全性能，偏向于工具，这块技术发展变化比较迅速，大模型日新月异，应用层技术也跟随变化较多。\n根据此特点选择脚本类型语言作为应用层开发语言。待选语言有 Nodejs python。 个人虽熟悉 Nodejs，但鉴于 Python 生态较好 性能较好等，最后决定 Python。\nPython 综述 Python 第一版本发布于 2000年，目前在 Tiobe 排行榜里人数排名第一，社区热度也升为第一。\n定位：高级语言，通用能力编程语言 特性：动态语言，基于解释器，gc 等 范式：函数编程，面向对象，面向过程 主要在 数据处理，计算，Web等发挥作用，AI 领域使用很多， Web 开发也有很多场景\n运行模式支持 多进程，多线程，协程\n执行流程 这一章直接问了 gpt，下面都是 ai 的回答\n在Python中，程序的执行流程通常是按照以下步骤进行的：\n解释器读取源代码：Python解释器会逐行读取源代码文件，并将其转换为字节码形式，这是一种中间表示形式，可以被Python虚拟机执行。\n词法分析和语法分析：在这个阶段，Python解释器会将源代码分解成单词（Token）并构建语法树。这个过程包括词法分析（将源代码分解为Token）和语法分析（根据语法规则构建语法树）。\n编译字节码：Python解释器将语法树转换为字节码。字节码是一种中间形式，类似于机器码，但是不是针对特定的硬件架构。\n执行字节码：Python虚拟机执行字节码指令。这些指令会被逐条执行，从而实现程序的逻辑。\n动态类型检查：Python是一种动态类型语言，因此在运行时会进行类型检查。如果类型不匹配，会引发类型错误。\n垃圾回收：Python具有自动内存管理机制，包括垃圾回收。垃圾回收器会定期检查不再使用的内存对象，并释放它们。\n异常处理：在程序执行过程中，如果发生异常，Python会查找合适的异常处理程序。如果找不到合适的处理程序，程序会中止并打印错误信息。\n程序结束：当程序执行完所有的代码或遇到显式的退出语句（如return或sys.exit()）时，程序结束执行。\n语法 跟我熟悉的 JS 差别很大，总体感受很灵活。基础的比如：变量 循环，函数的定义参数。可以直接看官方文档\n个人感觉 1-2 周左右时间，即可上手基础开发。\n这里只提下我印象比较深刻的函数部分： 通过 def 定义，通过缩进写函数体，当然也可以添加类型系统，比如入参数类型，返回类型。基础demo如下\ndef add(num1, num2) return num1 + num2 sum = add(1, 2) print(sum) 函数参数可以用 * *key_yars 来动态接收","title":"Python 学习总结"},{"content":"近两年AI太火了，认真体验及分析后，不得不跟上。最少要把相关工具使用好。恰好工作中也在做相关工具，遂梳理之。\n打败马车夫的不是汽车本身，而是会开车的司机\n生成式AI的爆发 AI 这个领域很早就开始了，这个理念也很早就有了，比如早期图像处理，语音识别，阿尔法go等。可以回溯之前很多年。为何最近两年开始爆火了。我认为原因有几点：\n技术突破: 大模型的底层推出了 transformer 架构。改变了大模型深度学习的格局带来了质的飞跃 基础设施发展: 一个模型巨量的计算，消耗大量资源。硬件基础设施的发展能降低训练成本，试错成本，让更多想法去实现 数据的积累: 互联网发展至今产生了大量数据，可以作为训练知识来让模型学习，这些都是人类发展产生的财富。 能改变什么 有人说任何行业都可以重新再做一遍\n人类的进步，从来离不开工具，有了轮子就有了车，马车，有了蒸汽机就有了汽车，这些都是革命性的改进，都是依赖工具的。工具改变了生产力，进一步质变为影响生产关系。促进了社会整体变化。\n总结下来当前影响最大的几个面：\n广告/自媒体行业的商业模式 剪辑，修图，这种体力活完全可以用AI帮忙做了\n教育教培，学习方式 对于家长可以用 AI 辅助教养小孩子，学生也可以方便的用AI自助学习。\n工作效率提升 有些细节直接用AI生成即可，员工负责更高一层的控制\n软件开发程序员 我本身就在程序员行当里，对这个提效深有体会\n局限性 正如人类能想象到的东西都是现有认知范围内现有知识体系内的东西一样，AI 学习能力目前还处于理解现有知识体系的状态。无法突破知识界限，只有在有限的知识范围内做一个最强大脑。 所以局限性在于，他只是一个只能基于现有知识的超强大脑，无法升维无法突破边界。 当然如果有了一个这样超强大脑，本身就是一件很厉害的事情。至于突破编辑，升维知识，这个还要考我们人类，然后再喂给AI，形成一个循环。\n一旦AI具备 公理，定律等级别的创新，是非常恐怖的，人类的一切迷惑将不再是迷惑，我是谁？来自哪里？要去哪里？上帝是谁，造物主是谁，各方神灵，神明又是谁？宇宙之外在哪里？生命是什么？为什么活着，为啥又要死去\n模型 百花齐放，百家争鸣。通用，垂类，领域模型等太多了，发展过于迅速，具体模型此处不多谈。\n要谈的是：\n深度学习模式的变革，基于 Transformer 架构的深度学习促进了当下模型厂商的发展，多层 Transformer 架构使得大模型更像人类大脑。 向量化，万事万物皆是向量，皆是数据，向量这个结构让事物之间的关系拉平了。就像分子，化学元素一样，构成了物质世界，而向量则在虚拟世界里描述这个世界 基于这两个重要的底层知识，模型的发展，飞起来了。\n菩提本无树，明镜亦非台，本来无一物，何处惹尘埃\nAI应用 大模型还毕竟只是一个最强大脑，一个超强CPU。我们知道通用计算机，不止CPU，还有一些外围设备才能通用工作，人类也是，不止大脑，还有眼睛，手，等外围设备。\n所以 AI 应用，或则 Agent 的概念，可以如此类比。\n技术工具 开源的技术工具很多，目前我在用 Langchain。但是不能局限于这些上层工具\n我在做什么 我在做 AI 应用， AI Agent。让大模型这个最强大脑扩展一些外围设备，让他更像人类一样，某种意义上来说也是一种AGI的探索。\n生活上，要考虑这些新的东西，能不能给自己带来切身收获，直白一点怎么变现，怎么让他提升自己的核心竞争力，在这承平已久，开始出现混乱的年代里，怎么用这个活下去。\n","permalink":"https://tomorrowthief.github.io/posts/work-thought/","summary":"近两年AI太火了，认真体验及分析后，不得不跟上。最少要把相关工具使用好。恰好工作中也在做相关工具，遂梳理之。\n打败马车夫的不是汽车本身，而是会开车的司机\n生成式AI的爆发 AI 这个领域很早就开始了，这个理念也很早就有了，比如早期图像处理，语音识别，阿尔法go等。可以回溯之前很多年。为何最近两年开始爆火了。我认为原因有几点：\n技术突破: 大模型的底层推出了 transformer 架构。改变了大模型深度学习的格局带来了质的飞跃 基础设施发展: 一个模型巨量的计算，消耗大量资源。硬件基础设施的发展能降低训练成本，试错成本，让更多想法去实现 数据的积累: 互联网发展至今产生了大量数据，可以作为训练知识来让模型学习，这些都是人类发展产生的财富。 能改变什么 有人说任何行业都可以重新再做一遍\n人类的进步，从来离不开工具，有了轮子就有了车，马车，有了蒸汽机就有了汽车，这些都是革命性的改进，都是依赖工具的。工具改变了生产力，进一步质变为影响生产关系。促进了社会整体变化。\n总结下来当前影响最大的几个面：\n广告/自媒体行业的商业模式 剪辑，修图，这种体力活完全可以用AI帮忙做了\n教育教培，学习方式 对于家长可以用 AI 辅助教养小孩子，学生也可以方便的用AI自助学习。\n工作效率提升 有些细节直接用AI生成即可，员工负责更高一层的控制\n软件开发程序员 我本身就在程序员行当里，对这个提效深有体会\n局限性 正如人类能想象到的东西都是现有认知范围内现有知识体系内的东西一样，AI 学习能力目前还处于理解现有知识体系的状态。无法突破知识界限，只有在有限的知识范围内做一个最强大脑。 所以局限性在于，他只是一个只能基于现有知识的超强大脑，无法升维无法突破边界。 当然如果有了一个这样超强大脑，本身就是一件很厉害的事情。至于突破编辑，升维知识，这个还要考我们人类，然后再喂给AI，形成一个循环。\n一旦AI具备 公理，定律等级别的创新，是非常恐怖的，人类的一切迷惑将不再是迷惑，我是谁？来自哪里？要去哪里？上帝是谁，造物主是谁，各方神灵，神明又是谁？宇宙之外在哪里？生命是什么？为什么活着，为啥又要死去\n模型 百花齐放，百家争鸣。通用，垂类，领域模型等太多了，发展过于迅速，具体模型此处不多谈。\n要谈的是：\n深度学习模式的变革，基于 Transformer 架构的深度学习促进了当下模型厂商的发展，多层 Transformer 架构使得大模型更像人类大脑。 向量化，万事万物皆是向量，皆是数据，向量这个结构让事物之间的关系拉平了。就像分子，化学元素一样，构成了物质世界，而向量则在虚拟世界里描述这个世界 基于这两个重要的底层知识，模型的发展，飞起来了。\n菩提本无树，明镜亦非台，本来无一物，何处惹尘埃\nAI应用 大模型还毕竟只是一个最强大脑，一个超强CPU。我们知道通用计算机，不止CPU，还有一些外围设备才能通用工作，人类也是，不止大脑，还有眼睛，手，等外围设备。\n所以 AI 应用，或则 Agent 的概念，可以如此类比。\n技术工具 开源的技术工具很多，目前我在用 Langchain。但是不能局限于这些上层工具\n我在做什么 我在做 AI 应用， AI Agent。让大模型这个最强大脑扩展一些外围设备，让他更像人类一样，某种意义上来说也是一种AGI的探索。\n生活上，要考虑这些新的东西，能不能给自己带来切身收获，直白一点怎么变现，怎么让他提升自己的核心竞争力，在这承平已久，开始出现混乱的年代里，怎么用这个活下去。","title":"AI应用实践的思考"},{"content":"此为一种劝诫训子的书，主要方向是如何处事，也可以是一本养心之书。从中国传统价值观及儒释道的哲学体系来讲述如何处事。总体分为四部分。\n作者是明万历期，69岁时所著。推荐此书的名人：曾国藩，据说其号 涤生 就是因为此书而来；稻盛和夫等。\n阅读建议：作为枕边书，或者心静的时候细读。\n分篇章总结 立命之学 此为开篇，作者以自己早起人生经历，讲述处事流程中第一个阶段：立命。非常重要的人生阶段，大概人与人的差距也会在此拉开。\n我命由我不由天 本篇最重要的概念了算是。具体一点就是命运是自己把握的。这一点估计现代人看到后会有很多反对点：起跑线不一样，人生结局可大大不同了。\n我的理解是：天生给到的东西已成定行，无法改变。但是之后的情形，还需通过自身不断学习，不断发展来改变。我们尽量做好能做的，其他的只能坦然接受。\n弃医从文 改变医生的方向，发展仕途的方向。中国历来都是学而优则仕，其他都是歧途。当下路子多了起来，但是遇到环境恶略的时候，发现还得是公务员稳啊。\n持续学习 文中讲到：顺利时也不要忘记努力发展，说不定啥时候不顺就来了。跟当下持续学习的概念不谋而合。随时准备拥抱变化，唯有持续学习，持续适应才能得心应手。\n不念过往 从前种种譬如昨日死，往后种种譬如今日生。\n改过之法 内心，真心，是前提。我觉得这一篇是重要紧急四象限的第二象限里的东西，很重要，也很容易忽略而没做好，应该是我们每天首要考虑的东西\n先有耻辱感 是否曲直，做一个有原则的人\n发自内心的行动 是否是真的在做，还是在模仿，还是在做一个样子。改过之行，来不得半点虚伪。\n积善之方 这一篇里讲述了要行善，行什么善，从十种角度来分析 善，区别什么是善，如何下后。此篇结构简单，但是内容较多，可以选择行阅读\n但行好事莫问前程 这一篇是很佛教里的思想了，善有善报恶有恶报。我不敢苟同这个观点，现实遇到太多事情违背这个理论了。\n但是我觉得行善还是有必要做的。并不是为了有善报，也不会因为你行了善就会有善报。最起码不要去做恶吧，能有一份心安理得不就够了么？\n不平等的地方太多了 社会上不平等的地方很多。若你可能是占便宜的一方，你会怎么想，而你是吃亏的一方，你又怎么想？\n做事情不可太功利 太过于功利，可能会变形。读一本书就想获得人生智慧，学一个技能就想发财致富，别想了。\n谦德之效 为人要低调的方式。不要轻易显山露水，少说话多干事。勿要恃才傲物，做事抱有空杯心态，虚怀若谷。\n总结 这本书，于我作为一本修心的书去阅读。对于有些人会问值不值得读，我觉得非常值得。但书和道理是死的。看你怎么理解消化了。\n从前种种, 譬如昨日死; 以后种种, 譬如今日生.\n","permalink":"https://tomorrowthief.github.io/posts/liaofansixun/","summary":"此为一种劝诫训子的书，主要方向是如何处事，也可以是一本养心之书。从中国传统价值观及儒释道的哲学体系来讲述如何处事。总体分为四部分。\n作者是明万历期，69岁时所著。推荐此书的名人：曾国藩，据说其号 涤生 就是因为此书而来；稻盛和夫等。\n阅读建议：作为枕边书，或者心静的时候细读。\n分篇章总结 立命之学 此为开篇，作者以自己早起人生经历，讲述处事流程中第一个阶段：立命。非常重要的人生阶段，大概人与人的差距也会在此拉开。\n我命由我不由天 本篇最重要的概念了算是。具体一点就是命运是自己把握的。这一点估计现代人看到后会有很多反对点：起跑线不一样，人生结局可大大不同了。\n我的理解是：天生给到的东西已成定行，无法改变。但是之后的情形，还需通过自身不断学习，不断发展来改变。我们尽量做好能做的，其他的只能坦然接受。\n弃医从文 改变医生的方向，发展仕途的方向。中国历来都是学而优则仕，其他都是歧途。当下路子多了起来，但是遇到环境恶略的时候，发现还得是公务员稳啊。\n持续学习 文中讲到：顺利时也不要忘记努力发展，说不定啥时候不顺就来了。跟当下持续学习的概念不谋而合。随时准备拥抱变化，唯有持续学习，持续适应才能得心应手。\n不念过往 从前种种譬如昨日死，往后种种譬如今日生。\n改过之法 内心，真心，是前提。我觉得这一篇是重要紧急四象限的第二象限里的东西，很重要，也很容易忽略而没做好，应该是我们每天首要考虑的东西\n先有耻辱感 是否曲直，做一个有原则的人\n发自内心的行动 是否是真的在做，还是在模仿，还是在做一个样子。改过之行，来不得半点虚伪。\n积善之方 这一篇里讲述了要行善，行什么善，从十种角度来分析 善，区别什么是善，如何下后。此篇结构简单，但是内容较多，可以选择行阅读\n但行好事莫问前程 这一篇是很佛教里的思想了，善有善报恶有恶报。我不敢苟同这个观点，现实遇到太多事情违背这个理论了。\n但是我觉得行善还是有必要做的。并不是为了有善报，也不会因为你行了善就会有善报。最起码不要去做恶吧，能有一份心安理得不就够了么？\n不平等的地方太多了 社会上不平等的地方很多。若你可能是占便宜的一方，你会怎么想，而你是吃亏的一方，你又怎么想？\n做事情不可太功利 太过于功利，可能会变形。读一本书就想获得人生智慧，学一个技能就想发财致富，别想了。\n谦德之效 为人要低调的方式。不要轻易显山露水，少说话多干事。勿要恃才傲物，做事抱有空杯心态，虚怀若谷。\n总结 这本书，于我作为一本修心的书去阅读。对于有些人会问值不值得读，我觉得非常值得。但书和道理是死的。看你怎么理解消化了。\n从前种种, 譬如昨日死; 以后种种, 譬如今日生.","title":"了凡四训"},{"content":" 六国破灭非并不利战不善，弊在赂秦……\n近日偶然重新看了这篇文章。再细读后，才发现其文风犀利，逻辑清晰，论点简明有力。虽作为高中时期的教材，那会儿跟不懂内容只知道背诵那些文字，再读后有种相见恨晚的感觉。\n全文读下来感觉朗朗上口，思路清晰，逻辑感也很强。是一篇非常好的议论文。\n一些文段 今日割五城，明日割十城，然后换得一夕安寝。起视四境，而秦兵又至。\n用物质消灭贪婪是不可能的，犹抱薪救火，薪不尽火不灭。讲的是人的贪婪欲望是无限的，一味的去迎合这些，那就会陷入无底洞。\n以赂秦之地封天下之谋臣，以事秦之心礼天下奇才，并力向西。则吾恐秦人食之不得下咽也\n这里想到了一个公司内耗严重的时候，将这些内耗的精力拿到做应该做的事情，才是公司团队应该的做法。\n个体利益与群体利益 上面那个道理我想很多人都会懂，但是为什么现实中还是会陷入内耗中。我觉得是一些人性本质问题: 为什么要你过的比我好，我玩不了，大家也都别想玩，所谓不患寡而患不均。另外就是在总的资源有限人又很多的时候，每个人都为了生存不得选择了个体利益优先的决定。\n这种能做到全局最佳解的方式，目前只发现了蚂蚁，蜜蜂这些动物群体做好。一方面因为这些动物单个个体是没有思想的，生来机械的负责一些事情。而人类是有思想的有感情的，在这些生存决策前往往会选择只符合单一个体利益的情况。\n六国论里这个观点在理性上是全局最合理的，但是考虑到现实中人的本性问题，每个国家都有各自的想法，思想。最终的决策往往是不合乎理性的。\n所以我觉得六国破灭的另一个深层次的因素是人性本质问题，而要解决这个问题需要合。要有个唯一负责人来调度各国，形成统一战力\n公司里的六国 公司内部各个部门众多，单个部门想推动全局做好一件事情是比较困难的，这里最好通过一个总指挥的制度去推进事情。然而事实中关系错中复杂，身处此中的你我大多选择苟活，如此跟六国中的赂秦战术并无大的区别\n","permalink":"https://tomorrowthief.github.io/posts/liuguolun/","summary":"六国破灭非并不利战不善，弊在赂秦……\n近日偶然重新看了这篇文章。再细读后，才发现其文风犀利，逻辑清晰，论点简明有力。虽作为高中时期的教材，那会儿跟不懂内容只知道背诵那些文字，再读后有种相见恨晚的感觉。\n全文读下来感觉朗朗上口，思路清晰，逻辑感也很强。是一篇非常好的议论文。\n一些文段 今日割五城，明日割十城，然后换得一夕安寝。起视四境，而秦兵又至。\n用物质消灭贪婪是不可能的，犹抱薪救火，薪不尽火不灭。讲的是人的贪婪欲望是无限的，一味的去迎合这些，那就会陷入无底洞。\n以赂秦之地封天下之谋臣，以事秦之心礼天下奇才，并力向西。则吾恐秦人食之不得下咽也\n这里想到了一个公司内耗严重的时候，将这些内耗的精力拿到做应该做的事情，才是公司团队应该的做法。\n个体利益与群体利益 上面那个道理我想很多人都会懂，但是为什么现实中还是会陷入内耗中。我觉得是一些人性本质问题: 为什么要你过的比我好，我玩不了，大家也都别想玩，所谓不患寡而患不均。另外就是在总的资源有限人又很多的时候，每个人都为了生存不得选择了个体利益优先的决定。\n这种能做到全局最佳解的方式，目前只发现了蚂蚁，蜜蜂这些动物群体做好。一方面因为这些动物单个个体是没有思想的，生来机械的负责一些事情。而人类是有思想的有感情的，在这些生存决策前往往会选择只符合单一个体利益的情况。\n六国论里这个观点在理性上是全局最合理的，但是考虑到现实中人的本性问题，每个国家都有各自的想法，思想。最终的决策往往是不合乎理性的。\n所以我觉得六国破灭的另一个深层次的因素是人性本质问题，而要解决这个问题需要合。要有个唯一负责人来调度各国，形成统一战力\n公司里的六国 公司内部各个部门众多，单个部门想推动全局做好一件事情是比较困难的，这里最好通过一个总指挥的制度去推进事情。然而事实中关系错中复杂，身处此中的你我大多选择苟活，如此跟六国中的赂秦战术并无大的区别","title":"再读六国论"},{"content":"前言 近日工作不忙，偶然看到孙子兵法一书，印象里面应是各种打打杀杀，由无他事就读了一些，发现并不是那么简单。 博主在上下班路上，前后半个月的时间学习了一些。为了加深自己的记忆，理解。就梳理了这篇札记\n孙子兵法 是什么 孙子兵法是一本信息熵极高的阐述战争方法论的书，原文仅 6000 余字。经过之后两千多年时间沉淀：注解引申，国内外各大名家的参与，现在已经形成了一个战争理论生态，战争方法论。这里说的战争可以是冷兵器时代的战争，也可以是强调技术装备，信息化的现在战争，也可以是商战，工作职场，学业，投资。现在已经翻译了多国语言，据说在国外也比较流行，认可度极高。\n适读人群: 最好是有一定工作生活经验的人，如果是单纯的学生不建议阅读\n架构图 注此图引自知乎\n首先-不去战争 孙子兵法首要强调的是不战而胜，因为战争成本太高代价太大。特等医生的价值不是体现在治病救人，而是在生病前防疫工作：如何不得病，如何尽早发现病并及时治理。当然这里不是贬低治病救人的技术，只是我们经常忽略准备防疫的重要性，到了生病时候才发现代价真的太大。所以孙子兵法虽然是一本兵书，却比较强调怎么不去战争，规避战争，强调的是：日积月累，有备无患\n作战原则 实际中战斗是不可避免的。如何做好呢？战斗就像做事做人。孙子兵法全文里强调三大原则：知己知彼, 先胜后站, 至人而不至于人。很多具体章节里都是为了满足遵循这几个原则的，所以理解透了这些原则思想，一切满足此的都可以称为好兵法。\n就像软件架构里的设计模式 solid 原则，很多具体的模式都是为了满足实现solid原则。这些原则是贯穿整体的\n工作中需要做参考别的技术，大多是学习了别人的思想，别人的原则，然后根据自己的情况实现一套可行的方案。\n基本面 战前准备的方法论：五事七计(具体看上面架构图)。运筹帷幄，庙堂之上充分分析各个因素，最后制定出最有利的战斗计划。\n如同我们在做编码设计，或则项目时，基本都是先尽可能做好详设计，而这些又是比较耗费精力的。最后写代码具体工作却是很快的。倘若设计阶段没做好，后面很可能比较被动，代码自量也难以保证，返工之类的。\n操作面 有了五十七计，胜负因素方向已定。而战场却又千变万化，影响因素也不计其数。就要因地制宜的去发挥。孙子兵法里提出有行军，九地九变等，都是讲一些具体情况下的做法。\n这里我理解我们工作尤其是互联网这种变化较多工作，必须要做好抬头看路的工作。把握政策情况，市场情况，个人成长情况然后做好自己的规划。\n个人收获 收获还是挺多：明确了做事的 原则，系统分析法所谓方法论，底层逻辑。以及该做哪些事情，不该做哪些事情的取舍\n不要忽略基本面 善战者,无智名,无勇功。\n人们往往比较喜欢波澜壮阔的故事，而忽略基本面的作用。比如我们喜欢韩信背水一战的故事，但是从理论来上看是违背 五事七计 的分析。诸葛亮出师北伐的例子也是在基本面上就输了，汉武大帝的传奇一生，却耗费了文景之治的积累，所谓一将功成万骨枯。\n古今中外精彩故事也不少，但那是2000多年的历史积累，更多的是默默无闻却又贡献很多的平淡故事\n我们每个人也一样，绝大多数都是平凡平淡的。但是能把基础面做好，有一份好的学业，经营一份自己的工作事业，有个好的身体健康素质，已经能达到生活的意义\n准备的重要性 这里说的准备更多是: 五事七计。\n做管理: 考虑编制是如何的，组织架构怎样设计 带团队: 考虑梯队模型时分析成员画像，如五事里的将的能力模型定义：智信仁严勇 做项目: 考虑项目以来的技术，团队，项目本身的ROI等 知己知彼 难在知己 自己能决定失败，对手才能决定能否胜利。\n在势均力敌的时候，对手不犯错一般自己很难胜利。所以说胜利是看对手有没有犯错。对应的，自己的一些准备日常是决定自己能不能失败的。而真的知道自己的实力么，掌握好自己的优缺，了解自己所想要的不？是很关键的也容易被环境带偏\n做决策，客观了么？ 心里学上 人们选择一个事情，不是这个事情真实客观，而是人们期望他是对的，想要他是对的。\n最后生活并没有银弹，养兵千日用兵一时。基本面做的好了，操作面做的再差胜算也大；基本面做的普通，也不要放弃，操作面上还有很多空间。\n尽信书不如无书，理论很多，观点很多，说法很多，怎么去选择，怎么去用呢？\n","permalink":"https://tomorrowthief.github.io/posts/art-of-war/","summary":"前言 近日工作不忙，偶然看到孙子兵法一书，印象里面应是各种打打杀杀，由无他事就读了一些，发现并不是那么简单。 博主在上下班路上，前后半个月的时间学习了一些。为了加深自己的记忆，理解。就梳理了这篇札记\n孙子兵法 是什么 孙子兵法是一本信息熵极高的阐述战争方法论的书，原文仅 6000 余字。经过之后两千多年时间沉淀：注解引申，国内外各大名家的参与，现在已经形成了一个战争理论生态，战争方法论。这里说的战争可以是冷兵器时代的战争，也可以是强调技术装备，信息化的现在战争，也可以是商战，工作职场，学业，投资。现在已经翻译了多国语言，据说在国外也比较流行，认可度极高。\n适读人群: 最好是有一定工作生活经验的人，如果是单纯的学生不建议阅读\n架构图 注此图引自知乎\n首先-不去战争 孙子兵法首要强调的是不战而胜，因为战争成本太高代价太大。特等医生的价值不是体现在治病救人，而是在生病前防疫工作：如何不得病，如何尽早发现病并及时治理。当然这里不是贬低治病救人的技术，只是我们经常忽略准备防疫的重要性，到了生病时候才发现代价真的太大。所以孙子兵法虽然是一本兵书，却比较强调怎么不去战争，规避战争，强调的是：日积月累，有备无患\n作战原则 实际中战斗是不可避免的。如何做好呢？战斗就像做事做人。孙子兵法全文里强调三大原则：知己知彼, 先胜后站, 至人而不至于人。很多具体章节里都是为了满足遵循这几个原则的，所以理解透了这些原则思想，一切满足此的都可以称为好兵法。\n就像软件架构里的设计模式 solid 原则，很多具体的模式都是为了满足实现solid原则。这些原则是贯穿整体的\n工作中需要做参考别的技术，大多是学习了别人的思想，别人的原则，然后根据自己的情况实现一套可行的方案。\n基本面 战前准备的方法论：五事七计(具体看上面架构图)。运筹帷幄，庙堂之上充分分析各个因素，最后制定出最有利的战斗计划。\n如同我们在做编码设计，或则项目时，基本都是先尽可能做好详设计，而这些又是比较耗费精力的。最后写代码具体工作却是很快的。倘若设计阶段没做好，后面很可能比较被动，代码自量也难以保证，返工之类的。\n操作面 有了五十七计，胜负因素方向已定。而战场却又千变万化，影响因素也不计其数。就要因地制宜的去发挥。孙子兵法里提出有行军，九地九变等，都是讲一些具体情况下的做法。\n这里我理解我们工作尤其是互联网这种变化较多工作，必须要做好抬头看路的工作。把握政策情况，市场情况，个人成长情况然后做好自己的规划。\n个人收获 收获还是挺多：明确了做事的 原则，系统分析法所谓方法论，底层逻辑。以及该做哪些事情，不该做哪些事情的取舍\n不要忽略基本面 善战者,无智名,无勇功。\n人们往往比较喜欢波澜壮阔的故事，而忽略基本面的作用。比如我们喜欢韩信背水一战的故事，但是从理论来上看是违背 五事七计 的分析。诸葛亮出师北伐的例子也是在基本面上就输了，汉武大帝的传奇一生，却耗费了文景之治的积累，所谓一将功成万骨枯。\n古今中外精彩故事也不少，但那是2000多年的历史积累，更多的是默默无闻却又贡献很多的平淡故事\n我们每个人也一样，绝大多数都是平凡平淡的。但是能把基础面做好，有一份好的学业，经营一份自己的工作事业，有个好的身体健康素质，已经能达到生活的意义\n准备的重要性 这里说的准备更多是: 五事七计。\n做管理: 考虑编制是如何的，组织架构怎样设计 带团队: 考虑梯队模型时分析成员画像，如五事里的将的能力模型定义：智信仁严勇 做项目: 考虑项目以来的技术，团队，项目本身的ROI等 知己知彼 难在知己 自己能决定失败，对手才能决定能否胜利。\n在势均力敌的时候，对手不犯错一般自己很难胜利。所以说胜利是看对手有没有犯错。对应的，自己的一些准备日常是决定自己能不能失败的。而真的知道自己的实力么，掌握好自己的优缺，了解自己所想要的不？是很关键的也容易被环境带偏\n做决策，客观了么？ 心里学上 人们选择一个事情，不是这个事情真实客观，而是人们期望他是对的，想要他是对的。\n最后生活并没有银弹，养兵千日用兵一时。基本面做的好了，操作面做的再差胜算也大；基本面做的普通，也不要放弃，操作面上还有很多空间。\n尽信书不如无书，理论很多，观点很多，说法很多，怎么去选择，怎么去用呢？","title":"孙子兵法-研习记"},{"content":"公司合作沟通 前段时间入职了新公司，说下合作上的感受\n这家公司比较传统，人员沟通也特别传统。\n传统公司典型的问题\n不开放，不分享 爱理不理 ","permalink":"https://tomorrowthief.github.io/posts/%E5%B7%A5%E4%BD%9C%E5%90%88%E4%BD%9C/","summary":"公司合作沟通 前段时间入职了新公司，说下合作上的感受\n这家公司比较传统，人员沟通也特别传统。\n传统公司典型的问题\n不开放，不分享 爱理不理 ","title":"工作合作沟通方式"},{"content":"前言 之前在公司内部做过「扩展性设计」的分享。后面重新整理形成博客形式记录自己的学习。\n由于作者长期从事Web前端领域的工作的原因，本文也是基于这些技术领域发出的一些关于应用软件方向上的扩展性总结\n什么是扩展性设计 软件架构设计里比较关注的几个要素：扩展性，稳定性，可维护性。很多领域里都会有这方面的考虑。比如：业务架构，产品架构，软件技术架构。那么具体怎么定义呢\nExtensibility is a software engineering and systems design principle where the implementation takes future growth into consideration\n扩展性是在考虑未来增长发展时所做的一些工程实践和系统设计原则\n引用自维基百科的定义\n基础理论 这里讨论的理论基础是比较原始的，类似于数学或物理中的定律定理。实践中是要结合具体场景通过组合这里理论，以及基于这些理论做些推导来形成最佳的设计\n找到变化的东西 solid原则 分层明确 常用形式 中间件 中间件是一种实践比较成熟的形式了。基本的思想是根据一些约定拦截输入，做一些逻辑，或者修改挂载上下文，然后继续向下流。具体的形式上有\n洋葱模型中间件： koa2， redux 管道化模型的中间件：pipe 中间件实践中要考虑的因素是：\n中间件收集方式 中间件之间的关系，顺序等 插件 这种形式也比较常见。类似于微内核 + plugin/addon 模型。市面上也存在了很多基于此架构的工具或框架。此模式实践中要考虑的因素是：\n隔离性：暴露主应用的那些能力，防止插件的运行影响主应用逻辑 性能：进程模型设计，是否独立进程运行 生命周期：插件加载时机，插件执行时机 插件之间管理：插件之间是否能互相调用，互相影响 插件机制思想很简单，重要的是各种实现细节，实践中有不同形式与细节。这里日后单独写一篇文章来分析\n配置 读取配置文件，读取参数都是这种形式。是一种简单但实用的形式。不过多讨论\n案例分析 webpack中的扩展性设计 webpack 是一个比较流行的打包工具。其功能的强大，生态的繁荣离不他的插件体系和loader体系。本身作为一个流程控制中心，很多功能都是分散在各个插件里来做的\nloader体系 针对特定的文件类型来做处理的，有点类似上一节提到的管道化中间件模型。针对特定类型文件可以提供多个，按照顺序管道化的处理转换。\n插件体系 webpack 内部主要的两个概念是 complier主要负责构建整体流程等，compliton主要负责构建里的具体编译工作。这两者都是通过 Tapable 库来完成内部生命周期暴露，Tapable 大体上是一种 sub-pub 模式的实现, 其核心概念 hook 可以与 event系统里的某个 event 等价。在同一个hook下可以绑定很多handler的注册，有点像AOP编程思想。\n一个插件的demo\nfunction HelloWorldPlugin(options) { // 使用 options 设置插件实例…… } HelloWorldPlugin.prototype.apply = function(compiler) { compiler.plugin(\u0026#39;done\u0026#39;, function() { console.log(\u0026#39;Hello World!\u0026#39;); }); }; module.exports = HelloWorldPlugin; 解释: 插件是约定实现带有 apply 方法的类(demo中通过构造函数和原型的方式实现)。apply 方法是 webpack 内部使用的。webpack 暴露了 complier 对象给 apply，可以使用其暴露的生命周期钩子来处理所要逻辑，完整的钩子列表可以在官网上找\nbabel 副作用 对，最大的副作用就是过度设计，无论何种设计都不是免费的。完美的扩展机制是需要考虑很多因素的，上文有一些分析。倘若为了尚不明确的问题做复杂的设计，可能得不偿失。\n总结 扩展性很重要，同时也要警惕副作用。切不可为了设计而设计，实用有效，能为公司真正带来价值的才能成为好设计。当然如果职位就是探索研究型的，可以忽略一些副作用\n个人觉得做架构的最佳实践：充分理解问题的场景，规模，特有的属性等，未来的规划，结合基础理论来做具体设计。对未来的增长不明确时，不建议花费很大成本做这些设计。\n","permalink":"https://tomorrowthief.github.io/posts/extend-design/","summary":"前言 之前在公司内部做过「扩展性设计」的分享。后面重新整理形成博客形式记录自己的学习。\n由于作者长期从事Web前端领域的工作的原因，本文也是基于这些技术领域发出的一些关于应用软件方向上的扩展性总结\n什么是扩展性设计 软件架构设计里比较关注的几个要素：扩展性，稳定性，可维护性。很多领域里都会有这方面的考虑。比如：业务架构，产品架构，软件技术架构。那么具体怎么定义呢\nExtensibility is a software engineering and systems design principle where the implementation takes future growth into consideration\n扩展性是在考虑未来增长发展时所做的一些工程实践和系统设计原则\n引用自维基百科的定义\n基础理论 这里讨论的理论基础是比较原始的，类似于数学或物理中的定律定理。实践中是要结合具体场景通过组合这里理论，以及基于这些理论做些推导来形成最佳的设计\n找到变化的东西 solid原则 分层明确 常用形式 中间件 中间件是一种实践比较成熟的形式了。基本的思想是根据一些约定拦截输入，做一些逻辑，或者修改挂载上下文，然后继续向下流。具体的形式上有\n洋葱模型中间件： koa2， redux 管道化模型的中间件：pipe 中间件实践中要考虑的因素是：\n中间件收集方式 中间件之间的关系，顺序等 插件 这种形式也比较常见。类似于微内核 + plugin/addon 模型。市面上也存在了很多基于此架构的工具或框架。此模式实践中要考虑的因素是：\n隔离性：暴露主应用的那些能力，防止插件的运行影响主应用逻辑 性能：进程模型设计，是否独立进程运行 生命周期：插件加载时机，插件执行时机 插件之间管理：插件之间是否能互相调用，互相影响 插件机制思想很简单，重要的是各种实现细节，实践中有不同形式与细节。这里日后单独写一篇文章来分析\n配置 读取配置文件，读取参数都是这种形式。是一种简单但实用的形式。不过多讨论\n案例分析 webpack中的扩展性设计 webpack 是一个比较流行的打包工具。其功能的强大，生态的繁荣离不他的插件体系和loader体系。本身作为一个流程控制中心，很多功能都是分散在各个插件里来做的\nloader体系 针对特定的文件类型来做处理的，有点类似上一节提到的管道化中间件模型。针对特定类型文件可以提供多个，按照顺序管道化的处理转换。\n插件体系 webpack 内部主要的两个概念是 complier主要负责构建整体流程等，compliton主要负责构建里的具体编译工作。这两者都是通过 Tapable 库来完成内部生命周期暴露，Tapable 大体上是一种 sub-pub 模式的实现, 其核心概念 hook 可以与 event系统里的某个 event 等价。在同一个hook下可以绑定很多handler的注册，有点像AOP编程思想。","title":"扩展性设计"},{"content":"深度思考的重要性就不多强调了，该如何做好呢？\n如何做好深度思考？\n多维度 我这里说的多维度可以理解为多视角。\n做一个技术分享，在听众的视角下如何的，主办方的视角如何，分享者的视角又如何，领导视角，同事视角如何……\n多层次 一个事物是处于整体系统里的那一层，与其他层的依赖关系。都是可以考虑的\n比如日常技术问题处理，问题本身是如何的，处理及反馈流程是如何的，技术依赖的其他系统大概如何的……\n现象与本质 有哲学基础的都会知道，事物的发展变化都会有表现与本质的区别。这一点有点像我们使用技术框架时，能掌握好框架的使用层以及底层原理，才能以正确的姿势使用。\n同样道理，思考问题的表现以及底层逻辑如何，才能做好深度思考。实际中可能会更加复杂：人的关系，系统的关系，技术本身的关系\n刻意练习 所谓学而不思则茫，有了理论基础，加上一些刻意练习，才能真正掌握。具体落地点:\n多总结 多复盘 多积累方法论 多接触不同系统的案例 ","permalink":"https://tomorrowthief.github.io/posts/deep-thinking/","summary":"深度思考的重要性就不多强调了，该如何做好呢？\n如何做好深度思考？\n多维度 我这里说的多维度可以理解为多视角。\n做一个技术分享，在听众的视角下如何的，主办方的视角如何，分享者的视角又如何，领导视角，同事视角如何……\n多层次 一个事物是处于整体系统里的那一层，与其他层的依赖关系。都是可以考虑的\n比如日常技术问题处理，问题本身是如何的，处理及反馈流程是如何的，技术依赖的其他系统大概如何的……\n现象与本质 有哲学基础的都会知道，事物的发展变化都会有表现与本质的区别。这一点有点像我们使用技术框架时，能掌握好框架的使用层以及底层原理，才能以正确的姿势使用。\n同样道理，思考问题的表现以及底层逻辑如何，才能做好深度思考。实际中可能会更加复杂：人的关系，系统的关系，技术本身的关系\n刻意练习 所谓学而不思则茫，有了理论基础，加上一些刻意练习，才能真正掌握。具体落地点:\n多总结 多复盘 多积累方法论 多接触不同系统的案例 ","title":"深度思考"},{"content":"最近开始学习蛙泳，其实很早之前下水练习过几次，但是没有系统的整理。最近开始了系统性的练习：看了些视频讲解，纠正了些错误，总算有些小进步。\n过程中发现了自己之前很多动作，模式，思考是不对的。但是纠正这些不对的点花费了很久时间。学习效率比较低。而纠正错误的技巧以及思路是一个通用的学习理论，对于工作，生活应该都适用。所以做了此快速学习新技能技巧的总结，或者称之为方法论也好。\n学习速度 掌握好正确的路径，学习资料，其余的就是练习了。理论与实践相辅相承。在实践中遇到问题，可能是理论没有吃透，可以多补充。比如不知道动作该怎么连贯（划手蹬腿结合）的时候，可以补充下理论。理论充足不等于实践也厉害，因为都有个人，环境的因素。\n所以 理论和实践结合 互相补充 来提速\n基础比较关键 最重要的基础点是：\n划手 蹬腿 协调 切记欲速不达的道理： 我之前基础练习的不够好，蹬腿，划手导致在完整动作时漏洞百出，出了问题没有头绪，然后再回过头一点一点练习基础才能做好完整动作，这个过程就比较浪费时间了。 在看专业运动员每一个细节都特别好，大概就是基础比较扎实了吧。所以想要快速达到目标，不要忽视了基础。稳扎稳打可能是速度最快的方式\n好的老师 个人在实践中总是会有很多点会偏离最优，有些思想也会偏离。有的时候会卡在某个环节出不来，这个时候如果自己有良好的资料可以参考，最好了。 比如我在呼气练习的时候，水下一直是哈气的动作，水上就不能很好的吸气了，知道看到有个解说提醒说水下吐气，才知道，这个环节练习错了。这个哈气矫正为吐气的过程是看了讲解。但是假如有个好教师帮忙点一二，可以快速解围解困惑的。\n类似的工作中也比较强调有好的导师，好的领导的重要性，所谓读万卷书不如行万里路，不过阅人无数，不如良师指点。 所以如何发现好老师？正规的学习指南，学习资料是大家当前最合适的，有真人最好了。\n最后发现总结的都是些大道理，这些大道理大家应该都懂，但是怎么与实际结合并帮助实践是比较关键的。\n总结 本文通过个人蛙泳学习过程中遇到的问题做了些反思，总结了一些快速学习技能的通用技巧方法论。并强调这些大道理如何与实际结合的技巧才是关键。希望对做其他事情有帮助，也不枉这次辛苦练习了。最后学习的过程是没有银弹的，前进吧少年\n","permalink":"https://tomorrowthief.github.io/posts/swim/","summary":"最近开始学习蛙泳，其实很早之前下水练习过几次，但是没有系统的整理。最近开始了系统性的练习：看了些视频讲解，纠正了些错误，总算有些小进步。\n过程中发现了自己之前很多动作，模式，思考是不对的。但是纠正这些不对的点花费了很久时间。学习效率比较低。而纠正错误的技巧以及思路是一个通用的学习理论，对于工作，生活应该都适用。所以做了此快速学习新技能技巧的总结，或者称之为方法论也好。\n学习速度 掌握好正确的路径，学习资料，其余的就是练习了。理论与实践相辅相承。在实践中遇到问题，可能是理论没有吃透，可以多补充。比如不知道动作该怎么连贯（划手蹬腿结合）的时候，可以补充下理论。理论充足不等于实践也厉害，因为都有个人，环境的因素。\n所以 理论和实践结合 互相补充 来提速\n基础比较关键 最重要的基础点是：\n划手 蹬腿 协调 切记欲速不达的道理： 我之前基础练习的不够好，蹬腿，划手导致在完整动作时漏洞百出，出了问题没有头绪，然后再回过头一点一点练习基础才能做好完整动作，这个过程就比较浪费时间了。 在看专业运动员每一个细节都特别好，大概就是基础比较扎实了吧。所以想要快速达到目标，不要忽视了基础。稳扎稳打可能是速度最快的方式\n好的老师 个人在实践中总是会有很多点会偏离最优，有些思想也会偏离。有的时候会卡在某个环节出不来，这个时候如果自己有良好的资料可以参考，最好了。 比如我在呼气练习的时候，水下一直是哈气的动作，水上就不能很好的吸气了，知道看到有个解说提醒说水下吐气，才知道，这个环节练习错了。这个哈气矫正为吐气的过程是看了讲解。但是假如有个好教师帮忙点一二，可以快速解围解困惑的。\n类似的工作中也比较强调有好的导师，好的领导的重要性，所谓读万卷书不如行万里路，不过阅人无数，不如良师指点。 所以如何发现好老师？正规的学习指南，学习资料是大家当前最合适的，有真人最好了。\n最后发现总结的都是些大道理，这些大道理大家应该都懂，但是怎么与实际结合并帮助实践是比较关键的。\n总结 本文通过个人蛙泳学习过程中遇到的问题做了些反思，总结了一些快速学习技能的通用技巧方法论。并强调这些大道理如何与实际结合的技巧才是关键。希望对做其他事情有帮助，也不枉这次辛苦练习了。最后学习的过程是没有银弹的，前进吧少年","title":"蛙泳学思"},{"content":"背景 最近比较空闲，在写作东西的时候发现一个不错的主题。刚好自己除了一些公共账号外，还没自己的博客，遂搭建之。\n主题：基于Hugo，详细可以见网站底部。托管于 GitHub Pages。\n博客内容 主要是搬移之前写过的一些东西，同时做了一些格式化处理。未来新写的东西应该会首先发到这里了\n菩提本无树，明镜亦非台，本来无一物，何处惹尘埃\n","permalink":"https://tomorrowthief.github.io/posts/kaishila/","summary":"背景 最近比较空闲，在写作东西的时候发现一个不错的主题。刚好自己除了一些公共账号外，还没自己的博客，遂搭建之。\n主题：基于Hugo，详细可以见网站底部。托管于 GitHub Pages。\n博客内容 主要是搬移之前写过的一些东西，同时做了一些格式化处理。未来新写的东西应该会首先发到这里了\n菩提本无树，明镜亦非台，本来无一物，何处惹尘埃","title":"文章搬运开始啦"},{"content":" 工作: Software Engineer based in HangZhou 技术: Web Developer，JavaScript，Nodejs, AI Application, LLM, LangChain 生活: 运动(游泳，快走)，游戏(Dota2)，偶尔做饭 努力生活，开心工作中～ ","permalink":"https://tomorrowthief.github.io/about/","summary":"about","title":"About"}]