[{"content":"缘起 我接触 AI 编程挺早了，体验过从早期蛮荒交互形式：在聊天框里问答然后复制结果到编辑器，到最近植入到 IDE 内的， 以及 更加流行的 CLI 形式的交互演进。多少算是见证了 AI 编程的演进。\nAI 编程的称呼也很多，有的叫 AI Coding，有的叫 AI Pair Programming，还有的叫 AI Copilot，甚至有的叫 AI Vibe Coding。我更喜欢 Pair Programming 这个说法，因为它强调了 AI 和人类的协作关系。\n作为一个典型的喜欢白嫖的用户，也会为顶部产品付费，最多的是 Cursor。因为真的被他们的效果吸引了。\n这里就总结下我对 AI 编程的体验和感受。\n交互形式 Cursor 的一些内容 Claude Code 上下文工程 依然是工具 取代程序员？ 和谐共处 路漫漫其修远兮，吾将上下而求索\n","permalink":"https://tomorrowthief.github.io/posts/ai-vibe-coding/","summary":"\u003ch2 id=\"缘起\"\u003e缘起\u003c/h2\u003e\n\u003cp\u003e我接触 AI 编程挺早了，体验过从早期蛮荒交互形式：在聊天框里问答然后复制结果到编辑器，到最近植入到 IDE 内的， 以及 更加流行的 CLI 形式的交互演进。多少算是见证了 AI 编程的演进。\u003c/p\u003e\n\u003cp\u003eAI 编程的称呼也很多，有的叫 AI Coding，有的叫 AI Pair Programming，还有的叫 AI Copilot，甚至有的叫 AI Vibe Coding。我更喜欢 Pair Programming 这个说法，因为它强调了 AI 和人类的协作关系。\u003c/p\u003e\n\u003cp\u003e作为一个典型的喜欢白嫖的用户，也会为顶部产品付费，最多的是 Cursor。因为真的被他们的效果吸引了。\u003c/p\u003e\n\u003cp\u003e这里就总结下我对 AI 编程的体验和感受。\u003c/p\u003e\n\u003ch2 id=\"交互形式\"\u003e交互形式\u003c/h2\u003e\n\u003ch2 id=\"cursor-的一些内容\"\u003eCursor 的一些内容\u003c/h2\u003e\n\u003ch2 id=\"claude-code\"\u003eClaude Code\u003c/h2\u003e\n\u003ch2 id=\"上下文工程\"\u003e上下文工程\u003c/h2\u003e\n\u003ch2 id=\"依然是工具\"\u003e依然是工具\u003c/h2\u003e\n\u003ch2 id=\"取代程序员\"\u003e取代程序员？\u003c/h2\u003e\n\u003ch2 id=\"和谐共处\"\u003e和谐共处\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e路漫漫其修远兮，吾将上下而求索\u003c/p\u003e\u003c/blockquote\u003e","title":"Vibe Coding: AI的编程总结"},{"content":"首先我认同 AI 时代会改变很多生活，生产，工作的形态，甚至更多……，当然这个主题很大，谁都难以精确的的预测各行各业的发展，\n很荣幸为一个 软件工作者 及 普通居民 的角色能站在这场变革的一线，几乎从23年开始一直持续关注相关的动态，参与到一些 AI 产品的使用中，并且参与到一些 AI 产品的开发中。\n就宏观上输出下我个人的感受，后面会继续在一些细节(产品发展，相关技术，及个人重度参与的 vibe coding)上深入讨论\n类比以往的变革 我认为历史上重要的变革包含：语言产生，各种标准，各种度量，电，工业革命等。这些都是突破人类自然能力的变革，这一轮 AI 的发展也是的，因为能大幅提升人类输出内容\n预制菜 为什么要提这个似乎概念离得很远的词。因为看到当前 AI 输出的内容，很像是预制菜的感觉，简单分析下： 预制菜的特点是:\n预包装，提前做了食材处理 便捷，通过简单加热即可快速出货 多样化：种类繁多 Pros:\n节省时间 体验自己不会的菜谱 成本降低 Cons：\n食品安全 营养价值 仔细品一品，是不是当前 AI 生成的内容很类似。市场中，不乏有好的与坏的预制菜，总之也占领了一部分市场，人们多少都会接纳一些，默默的改变生活方式。我相信 AI 输出的内容是同理，有好有坏，有很大的市场，也在 默默改变生活生产方式。\n再想一想人类社会发展进程出现的一些工具基本都会改变人自然属性，从打猎到农业，从农业到工业，从工业到信息化，这些都是人类社会的进步。AI 也是一样，能大幅提升人类的输出能力。\n换言之：市场很大，拥抱接受，吸收，取其精华，去其糟粕。\nAI 下催生的机会 已经靠 AI 赚到的有哪些人？ 我发现这波浪潮下已经赚到的一些普通人，大概是这几类方向\n自媒体 \u0026amp; 卖课 出海的一些 AI 产品，出海更容易做商业化 国内的一些 AI 平台：Dify 等 靠这波热点拉投资的公司 公司转型，做这个方向的工作者 吃政策福利，研究经费的一些公职，教育者 总结下来看基本都是在原有行当做的很好的这波人，刚好了来了个 AI 机会给抓住了，比如卖课的人家本来就在卖课，吃政策拉投资的，人家就是这个圈里的，外人难以挤进来。单纯靠改变方向到 AI 硬靠的又赚到钱的并不多。\n所以还是那句话：机会是留给有准备的人的。普通人呢做好自己本来该做好的事情，然后添加一些爱学习的思维，当这波来的时候，能喝喝汤就好，如果能吃上肉那就偷着乐吧。\n提升个人战斗力 如果能提升个人战斗力，意味着能输出更多，进而能收入更多。现在市面上出现了一些 AI 产品，可以武装你让你从普通兵变为特种兵，具备一个人挑战一个团队的能力。所以市面上出现的 一人公司 概念也不是空穴来风。\n那么有哪些可以用来武装的产品，哪些场景可以武装呢？\n文职类任务：写作，创意文案，计划等，PPT 生成 教培：帮生成讲解内容 程序员：目前落地最好的一个方向，有了 AI，甚至你可以让自己变成全栈，变成某个方向的专家 哪些又需要谨慎武装呢？\n自媒体工作者：这类其实不太建议过多使用 AI，因为大家更多还是希望看到更加原生的一些东西，经过人类思考的东西，当前的 AI 内容还不够自然，基本上很容易能看出来是AI生成的。就像是预制菜饭店，大多还是不想吃。所以这类工作者如果过度使用 AI 会砸了自己的招牌。能用的地方在于背后的工作，而非呈现给看客的内容 初始化学习者：刚开始认识世界，或者有意想在某个方向深度发展的，最好还是从夯实基础开始，等自己能游刃有余的判断力之后再深度使用 求职者 国内互联网技术开发者似乎走向了成熟，深水区。经济环境不好的情况下，很难有更好的方向了。目前个人比较了解的一些继续走技术路线的方向\nAI 应用开发 Web 3 搞爬虫的 AI 应用是因为很多公司企业在面临 AI 转型的阶段，肯定会需要相关的开发者，不过一般需要内部转换或者活水就行。需要的技术栈也基本是传统的那些，只是应用到了 AI 这个方向而已，除非是算法方向。\nWeb3 是因为未来数字化程度比较高的时候，去中心化，安全化等的应用场景肯定会有空间。\n爬虫这个很好理解，因为 AI 需要数据，数据需要爬虫来获取。\n第二大脑的打造 目前AI产品，大模型，日新月异，一日千里，对于普通人选择一个主流的产品就行了。比如能科学上网的话，GPT系列肯定是最优，国内选择 Deepseek 够用。如果能带上有知识库的产品更好，比如腾讯的 ima，豆包的一些 AI 产品，如此可以成为自己的第二大脑，大百科全书的助手。\n如果是 AI Agent 工作者或者会使用 Dify Coze 工作流搭建的这些人，可以搭建不同角色的智能体。组成一个虚拟团队，来给自己提升左膀右臂的能力\n被动收入 在 AI 的时代下提升被动收入还是挺困难的，这块继续探索中。毕竟这是个业界难题呀，很多人在盯着这个。\n独立开发者可以开发一些AI Agent 产品，或者 AI 相关的产品，来实现被动收入。\nAI 时代下的工作者 轻松学 很幸运，现在这个互联网社会有很多知识都是公开的，可以很轻松的入门到一些未知领域。然后再结合 AI 这个第二大脑能深度学习，系统化学习。这给勤奋的人带来了很多机会。\n比如前段时间 我在探索后端开发技术栈上，对于概念上的理解梳理，几乎都是AI来帮做的，在之前可能需要自己去阅读大量书才行，达到同样的效果在之前可能需要花费几个月的时间，而现在只需要几周的时间，效果上还会更好。\n当然这里不是说不需要阅读书了，想在某些细节上掌握，还得自行阅读，毕竟 AI 知识的训练并没有那么深度的数据。\n一专多长 一专多长的能力模型会更加的轻松。注意自己专业的部分尽量不要用 AI 去提升。\n不是银弹 至少当下阶段 AI 仍然不是银弹，该出的力一点都不能少，只是这个杠杆效应一定要运用好\n结语 AI 时代下的你我，机会上还是要做好自己本来该做好的事情，效率上做好 AI+ 的思维，提升个人战斗力，提升工作效率。\n然后添加一些爱学习的思维，当这波来的时候，心态上能喝喝汤就好，不要想着能快速吃上肉。毕竟这波浪潮下，能吃上肉的还是那些有准备的人。\n工欲善其事必先利其器\n","permalink":"https://tomorrowthief.github.io/posts/ai-person/","summary":"\u003cp\u003e首先我认同 AI 时代会改变很多生活，生产，工作的形态，甚至更多……，当然这个主题很大，谁都难以精确的的预测各行各业的发展，\u003c/p\u003e\n\u003cp\u003e很荣幸为一个 \u003cstrong\u003e软件工作者\u003c/strong\u003e 及 \u003cstrong\u003e普通居民\u003c/strong\u003e 的角色能站在这场变革的一线，几乎从23年开始一直持续关注相关的动态，参与到一些 AI 产品的使用中，并且参与到一些 AI 产品的开发中。\u003c/p\u003e\n\u003cp\u003e就宏观上输出下我个人的感受，后面会继续在一些细节(产品发展，相关技术，及个人重度参与的 vibe coding)上深入讨论\u003c/p\u003e\n\u003ch3 id=\"类比以往的变革\"\u003e类比以往的变革\u003c/h3\u003e\n\u003cp\u003e我认为历史上重要的变革包含：语言产生，各种标准，各种度量，电，工业革命等。这些都是突破人类自然能力的变革，这一轮 AI 的发展也是的，因为能大幅提升人类输出内容\u003c/p\u003e\n\u003ch2 id=\"预制菜\"\u003e预制菜\u003c/h2\u003e\n\u003cp\u003e为什么要提这个似乎概念离得很远的词。因为看到当前 AI 输出的内容，很像是预制菜的感觉，简单分析下：\n预制菜的特点是:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e预包装，提前做了食材处理\u003c/li\u003e\n\u003cli\u003e便捷，通过简单加热即可快速出货\u003c/li\u003e\n\u003cli\u003e多样化：种类繁多\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ePros:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e节省时间\u003c/li\u003e\n\u003cli\u003e体验自己不会的菜谱\u003c/li\u003e\n\u003cli\u003e成本降低\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eCons：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e食品安全\u003c/li\u003e\n\u003cli\u003e营养价值\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e仔细品一品，是不是当前 AI 生成的内容很类似。市场中，不乏有好的与坏的预制菜，总之也占领了一部分市场，人们多少都会接纳一些，默默的改变生活方式。我相信 AI 输出的内容是同理，有好有坏，有很大的市场，也在 默默改变生活生产方式。\u003c/p\u003e\n\u003cp\u003e再想一想人类社会发展进程出现的一些工具基本都会改变人自然属性，从打猎到农业，从农业到工业，从工业到信息化，这些都是人类社会的进步。AI 也是一样，能大幅提升人类的输出能力。\u003c/p\u003e\n\u003cp\u003e换言之：市场很大，拥抱接受，吸收，取其精华，去其糟粕。\u003c/p\u003e\n\u003ch2 id=\"ai-下催生的机会\"\u003eAI 下催生的机会\u003c/h2\u003e\n\u003ch3 id=\"已经靠-ai-赚到的有哪些人\"\u003e已经靠 AI 赚到的有哪些人？\u003c/h3\u003e\n\u003cp\u003e我发现这波浪潮下已经赚到的一些普通人，大概是这几类方向\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e自媒体 \u0026amp; 卖课\u003c/li\u003e\n\u003cli\u003e出海的一些 AI 产品，出海更容易做商业化\u003c/li\u003e\n\u003cli\u003e国内的一些 AI 平台：Dify 等\u003c/li\u003e\n\u003cli\u003e靠这波热点拉投资的公司\u003c/li\u003e\n\u003cli\u003e公司转型，做这个方向的工作者\u003c/li\u003e\n\u003cli\u003e吃政策福利，研究经费的一些公职，教育者\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e总结下来看基本都是在原有行当做的很好的这波人，刚好了来了个 AI 机会给抓住了，比如卖课的人家本来就在卖课，吃政策拉投资的，人家就是这个圈里的，外人难以挤进来。单纯靠改变方向到 AI 硬靠的又赚到钱的并不多。\u003c/p\u003e\n\u003cp\u003e所以还是那句话：机会是留给有准备的人的。普通人呢做好自己本来该做好的事情，然后添加一些爱学习的思维，当这波来的时候，能喝喝汤就好，如果能吃上肉那就偷着乐吧。\u003c/p\u003e\n\u003ch3 id=\"提升个人战斗力\"\u003e提升个人战斗力\u003c/h3\u003e\n\u003cp\u003e如果能提升个人战斗力，意味着能输出更多，进而能收入更多。现在市面上出现了一些 AI 产品，可以武装你让你从普通兵变为\u003cstrong\u003e特种兵\u003c/strong\u003e，具备一个人挑战一个团队的能力。所以市面上出现的 \u003cstrong\u003e一人公司\u003c/strong\u003e 概念也不是空穴来风。\u003c/p\u003e","title":"AI 时代下的你我"},{"content":"前言 梳理下自己在 AI 产品开发中用到的一些技术，自己了解的一些业界中的技术\n","permalink":"https://tomorrowthief.github.io/posts/ai-tec/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e梳理下自己在 AI 产品开发中用到的一些技术，自己了解的一些业界中的技术\u003c/p\u003e","title":"AI 应用技术"},{"content":"前言 我是 AI应用开发者，开发过 AI Agent，Agent 搭建平台，也是 AI 产品的使用者。本文将分享我对 AI 产品的思考。主要是AI产品思路，列举一些好用的 AI 产品，和一些 AI 产品的使用技巧。\nAI 产品核心之核心 毋庸置疑核心是模型：LLM，Difusion Model，CV 模型等。与模型唯一通信载体是 Prompt，请记住这个唯一，非常重要，基本上功能都是围绕这个来做的。所以早期的AI产品都是称为 Prompt 产品，开发者是 prompt 工程师。\n而 Prompt 也有种类繁多的范式，不同场景不同目的使用不同的 Prompt。Prompt 设计的好坏直接影响 AI 产品的效果，这里暂且不表。\nAgent 与 Workflow ","permalink":"https://tomorrowthief.github.io/posts/ai-products/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e我是 AI应用开发者，开发过 AI Agent，Agent 搭建平台，也是 AI 产品的使用者。本文将分享我对 AI 产品的思考。主要是AI产品思路，列举一些好用的 AI 产品，和一些 AI 产品的使用技巧。\u003c/p\u003e\n\u003ch2 id=\"ai-产品核心之核心\"\u003eAI 产品核心之核心\u003c/h2\u003e\n\u003cp\u003e毋庸置疑核心是模型：LLM，Difusion Model，CV 模型等。与模型唯一通信载体是 Prompt，请记住这个唯一，非常重要，基本上功能都是围绕这个来做的。所以早期的AI产品都是称为 Prompt 产品，开发者是 prompt 工程师。\u003c/p\u003e\n\u003cp\u003e而 Prompt 也有种类繁多的范式，不同场景不同目的使用不同的 Prompt。Prompt 设计的好坏直接影响 AI 产品的效果，这里暂且不表。\u003c/p\u003e\n\u003ch2 id=\"agent-与-workflow\"\u003eAgent 与 Workflow\u003c/h2\u003e","title":"AI 产品思考"},{"content":"前言 Devops 从18年左右发展至今已经非常的成熟。可以作为一个独立职业，因为里面有很多细节。作为互联网软件开发者，我从开发的视角梳理下一些应知应会的框架，主要达到一个能使用，能了解架构，出了问题大概知道在哪个环节。具体细节暂时不追求。\n从 Docker 开始 Docker，是一种容器化的概念，属于虚拟化技术的一种形式。以颗粒度更小的方式，隔离性也更好的方式完成宿主机的资源榨取。他与虚拟机的核心区别是\nDocker与虚拟机的核心区别主要在于以下几个方面：\n架构层级：\n虚拟机（Virtual Machine, VM）：虚拟机在宿主操作系统之上运行一个完整的客户操作系统。它使用Hypervisor（如VMware、KVM、Hyper-V等）来虚拟化硬件资源，每个虚拟机都有自己的内核、操作系统和应用程序。 Docker容器：Docker容器在宿主操作系统之上运行，但它们与宿主共享相同的操作系统内核。容器是通过容器引擎（如Docker）来管理和隔离的。每个容器包含应用程序及其所有依赖项，但不包含完整的操作系统。 资源利用效率：\n虚拟机：由于每个虚拟机都需要一个完整的操作系统，因此启动和运行时会消耗更多的内存和CPU资源。 Docker容器：由于所有容器共享宿主操作系统的内核，启动时间更快，资源开销也更小。这使得容器更加轻量级，可以在同样的硬件上运行更多实例。 启动时间：\n虚拟机：由于需要启动一个完整的操作系统，虚拟机通常需要数分钟时间才能完全启动并准备好使用。 Docker容器：因为没有完整的OS启动过程，Docker容器通常可以在几秒钟内完成启动。 隔离性与安全性：\n虚拟机：提供了强隔离，因为每个VM运行在完全独立的环境中，包括独立的内核。因此，安全性较高。 Docker容器：虽然提供了进程级别的隔离，但仍共享宿主OS内核，因此理论上存在一些安全风险。不过，通过适当配置和使用工具（如SELinux、AppArmor等），可以增强安全性。 存储与持久化数据管理方式：\n虚拟机：通常使用虚拟磁盘文件来存储数据，这些文件可以独立于其他VM进行管理。 Docker容器：使用卷（volumes）和绑定挂载（bind mounts）来持久化数据，这些可以被多个容器共享或独立管理。 总而言之，Docker作为一种轻量级、便捷、高效且快速部署的方法，在云原生应用开发中得到了广泛应用。而虚拟机则仍然适用于需要强隔离、安全要求高以及需要运行不同类型操作系统等场景。\nDocker的核心原理是:\nDocker的核心原理是利用操作系统级的虚拟化技术（即容器化技术）来创建、部署和运行应用程序。具体来说，Docker 的核心原理包括以下几个方面：\nNamespace（命名空间）隔离：\nDocker 使用 Linux 内核的命名空间（Namespace）功能来实现进程隔离。这些命名空间包括 UTS（主机和域名）、IPC（进程间通信）、PID（进程 ID）、Network（网络）、Mount（文件系统挂载点）等。 每个容器都有独立的命名空间，因此它们之间不会互相干扰，提供了类似虚拟机的隔离效果。 Cgroups（控制组）资源控制：\nCgroups 是 Linux 内核提供的一种机制，用于限制、记录和隔离单个进程组的资源使用情况。Docker 使用 Cgroups 来限制容器可以使用的 CPU、内存、磁盘 I/O 等资源。 通过这种方式，Docker 能够确保每个容器在资源分配上互不干扰，并且可以避免某个容器滥用系统资源。 Union File System（联合文件系统）：\nDocker 使用联合文件系统，如 AUFS、OverlayFS 等，来实现镜像和容器的分层存储。每个 Docker 镜像由多层组成，每一层都是只读的，当需要对镜像进行修改时，会在顶层添加一个可写层。 这种分层设计不仅提高了存储效率，还使得镜像可以快速构建和共享。 Container Image（容器镜像）：\n容器镜像是一个包含应用程序及其所有依赖项的只读模板。Docker 容器是从这些镜像创建出来的一种运行实例。 镜像可以通过 Dockerfile 定义，并且支持版本管理，这使得应用程序环境变得可移植且易于复制。 Container Runtime：\nDocker 提供了一个高效的运行时环境，使得容器能够快速启动和停止。 容器运行时负责管理容器生命周期，包括创建、启动、停止和销毁等操作。 Networking and Storage：\nDocker 提供了一整套网络解决方案，使得不同主机上的容器能够通过虚拟网络进行通信。 同时，Docker 也支持将本地存储或分布式存储挂载到容器中，以便持久化数据。 通过这些核心技术，Docker 实现了轻量级、高效、安全的应用程序虚拟化，为开发者提供了一种简便的方法在任何环境中一致地部署应用。\nDocker 里重要的概念是 Image 就是镜像，可以理解为你一个系统镜像。是说明一个容器里怎么执行的。Image 的概念\n是类似于一个模板，它包含了运行应用所需的所有依赖和配置。每个镜像由一系列层次组成，每一层都描述了文件系统的一部分变化。了解镜像的构建和使用，有助于我们更好地管理容器化环境。\n镜像的构建 镜像通常通过 Dockerfile 来定义和构建。Dockerfile 是一个文本文件，其中包含了一系列指令，这些指令定义了如何从基础镜像创建一个新的自定义镜像。例如，常见的 Dockerfile 指令包括：\nFROM：\n指定基础镜像。例如，FROM ubuntu:latest 表示以最新版本的 Ubuntu 镜像为基础。 RUN：\n执行命令。例如，RUN apt-get update \u0026amp;\u0026amp; apt-get install -y nginx 表示在创建镜像时执行更新包索引并安装 Nginx。 COPY 和 ADD：\n将本地文件或目录复制到镜像中。例如，COPY . /app 表示将当前目录下的所有内容复制到镜像中的 /app 目录。 CMD 和 ENTRYPOINT：\n定义容器启动时要执行的命令。例如，CMD [ \u0026quot;nginx\u0026quot;, \u0026quot;-g\u0026quot;, \u0026quot;daemon off;\u0026quot; ] 表示容器启动时运行 Nginx。 镜像仓库 构建好的镜像可以推送到远程仓库（如 Docker Hub 或私有仓库），以便在不同环境中拉取和使用。常用操作包括：\ndocker push: 将本地镜像推送到远程仓库。 docker pull: 从远程仓库拉取指定镜像。 docker tag: 给本地镜像打标签，以便标识不同版本。 容器生命周期管理 容器是基于镜像实例化出来的运行实体。为了高效管理容器生命周期，我们需要掌握以下基本操作：\n启动容器：\n使用 docker run 命令启动新容器，例如 docker run -d --name my-nginx nginx:latest 启动一个名为 my-nginx 的 Nginx 容器。 停止容器：\n使用 docker stop 命令停止正在运行的容器，例如 docker stop my-nginx 停止名为 my-nginx 的容器。 删除容器：\n使用 docker rm 命令删除已停止的容器，例如 docker rm my-nginx 删除名为 my-nginx 的容器。 查看日志：\n使用 docker logs 命令查看指定容器的日志输出，例如 docker logs my-nginx. 进入正在运行的容器：\n使用 docker exec 命令进入正在运行中的某个容器进行调试或维护，例如 docker exec -it my-nginx /bin/bash. 通过对这些操作的熟练掌握，我们可以高效地管理和维护基于 Docker 的应用环境，从而提升开发与运维效率。\nK8s 编排 \u0026amp; 集群 Kubernetes（简称k8s）是一个开源的容器编排平台，用于自动化容器化应用的部署、扩展和管理。它提供了一个统一的平台，使得开发、测试和生产环境中的应用管理变得更加简便和高效。\n核心概念 节点（Node）：\n节点是 Kubernetes 集群中的工作机器，可以是物理机或虚拟机。每个节点上都运行着多个容器，同时也有必要的组件来管理这些容器，包括 kubelet、kube-proxy 等。 Pod：\nPod 是 Kubernetes 中最小的部署单位，一个 Pod 可以包含一个或多个紧密耦合的容器，这些容器共享网络命名空间和存储卷。Pod 通常用于运行单个应用实例或多个协同工作的应用组件。 控制平面（Control Plane）：\n控制平面负责集群的全局决策（如调度）以及检测和响应集群事件（如启动新的 pod）。主要组件包括 kube-apiserver、etcd、kube-scheduler 和 kube-controller-manager 等。 命名空间（Namespace）：\n命名空间用于在同一物理集群内创建多个虚拟集群，提供资源隔离机制。不同团队或项目可以使用独立的命名空间来管理各自的资源，避免互相干扰。 服务（Service）：\n服务是一种抽象，定义了一组逻辑上的 Pod 以及访问这些 Pod 的策略。服务通过标签选择器将请求负载分发给后台的一组 Pod，即使这些 Pod 在不同节点上运行。 控制器（Controller）：\n控制器负责维护系统的期望状态，如 Deployment、ReplicaSet 和 StatefulSet 等。它们通过监控当前状态并将其调整为期望状态来确保系统的一致性和可靠性。 部署与管理 Kubernetes 提供了多种资源对象，用于描述和管理集群中的应用：\nDeployment:\nDeployment 定义了应用程序的描述，包括镜像版本、副本数量等，并负责创建或更新 ReplicaSet 来维持指定数量的 Pod 副本。 ReplicaSet:\nReplicaSet 确保任何时候都有指定数量的 Pod 副本在运行，如果某个 Pod 挂掉，会立即启动新的副本来替代它。 StatefulSet:\nStatefulSet 专门用于有状态应用程序，它能保证每个 Pod 有固定标识，并支持有序部署与扩展。 DaemonSet:\nDaemonSet 确保所有符合条件的节点上都运行一个特定类型的 Pod，例如日志收集代理或监控代理。 Job 和 CronJob:\nJob 用于一次性任务，而 CronJob 则用于周期性任务，两者都确保任务在一定条件下成功执行。 通过理解并灵活运用这些核心概念和资源对象，我们能够实现复杂容器化应用在 Kubernetes 集群上的自动化运维，从而提高系统可靠性与可伸缩性。\n一般 devops 平台上会让用户添加服务，发布服务，服务的 ingress 转发规则配置， 服务的环境变量配置等，展开来讲如下：\n添加服务 在 DevOps 平台上，添加服务通常是指将一个新的应用程序或微服务引入到 Kubernetes 集群中。这个过程通常包括以下步骤：\n定义服务描述文件：\n使用 YAML 或 JSON 格式编写 Kubernetes 服务和部署配置文件。例如，定义一个包含 Deployment 和 Service 的 YAML 文件。 创建命名空间：\n如果需要隔离资源，可以先创建一个新的命名空间。例如，kubectl create namespace my-app。 应用配置文件：\n使用 kubectl apply -f 命令将配置文件应用到集群中。例如，kubectl apply -f my-app-deployment.yaml。 发布服务 发布服务是指将应用程序的更新版本部署到生产环境中。这通常涉及以下步骤：\n构建新镜像：\n在 CI/CD 管道中构建并推送新的 Docker 镜像。例如，使用 docker build 和 docker push 命令。 更新 Deployment 配置：\n修改 Deployment 配置文件中的镜像版本，并重新应用配置。例如，更新 image: my-app:v2.0 并运行 kubectl apply -f my-app-deployment.yaml。 逐步替换 Pod：\nKubernetes 会根据 Deployment 配置滚动更新 Pod，以最小化停机时间。可以通过 kubectl rollout status deployment/my-app 查看更新状态。 Ingress 转发规则配置 Ingress 是一种 API 对象，可以管理外部访问 Kubernetes 服务的方式。通过 Ingress 控制器和规则配置，可以灵活地处理路由和负载均衡：\n创建 Ingress 资源：\n定义 Ingress 资源的 YAML 文件，包括主机名、路径、目标服务等。例如： apiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: my-app-ingress namespace: my-app spec: rules: - host: myapp.example.com http: paths: - path: / pathType: Prefix backend: service: name: my-app-service port: number: 80 应用 Ingress 配置：\n使用 kubectl apply -f ingress.yaml 将 Ingress 资源应用到集群中。 验证访问：\n确认域名解析和路由是否正确，通过浏览器或命令行工具（如 curl）访问相应 URL 进行测试。 环境变量配置 在 Kubernetes 中，可以通过 ConfigMap 和 Secret 来管理环境变量：\n创建 ConfigMap 或 Secret：\n定义包含环境变量的 ConfigMap 或 Secret。例如，使用以下命令创建 ConfigMap： kubectl create configmap app-config --from-literal=KEY=value --namespace=my-app 在 Pod 中引用环境变量：\n在 Deployment 配置文件中引用 ConfigMap 或 Secret 环境变量，例如： apiVersion: apps/v1 kind: Deployment metadata: name: my-app-deployment namespace: my-app spec: template: spec: containers: - name: my-container image: my-image:v1.0 envFrom: - configMapRef: name: app-config env: - name: SECRET_KEY # 引用 Secret 环境变量示例 valueFrom: secretKeyRef: name: app-secret key: SECRET_KEY 通过这些步骤，我们可以灵活地管理和发布容器化应用，从而实现高效的 DevOps 流程。\n下面讲一讲 k8s 集群\n的搭建与管理。\nKubernetes 集群的搭建 Kubernetes 集群是由一组工作节点（Node）和控制平面（Control Plane）组件组成。搭建 Kubernetes 集群有多种方法，以下是几种常用的方法：\n使用 Minikube：\nMinikube 是一个单节点的 Kubernetes 集群，非常适合本地开发和测试。通过以下命令可以快速启动一个 Minikube 集群： minikube start 使用 kubeadm：\nkubeadm 是官方提供的工具，用于快速部署生产级别的 Kubernetes 集群。下面是基本步骤： 在所有节点上安装 Docker 和 kubeadm。 在主节点上初始化集群： sudo kubeadm init --pod-network-cidr=10.244.0.0/16 配置 kubectl 命令行工具： mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config 在工作节点上加入集群（获取 join 命令并在工作节点上运行）。 使用云服务提供商的托管方案：\n各大云服务提供商（如 AWS、GCP、Azure 等）都提供了托管的 Kubernetes 服务，例如 AWS 的 EKS、GCP 的 GKE 和 Azure 的 AKS。这些服务简化了集群管理，用户只需关注应用部署。 管理 Kubernetes 集群 一旦集群搭建完成，我们需要通过各种工具和策略来管理和维护它：\n监控与日志：\n使用 Prometheus 和 Grafana 监控集群状态和应用性能。 使用 Fluentd 或 ELK 堆栈收集和分析日志。 自动伸缩：\n配置 Horizontal Pod Autoscaler (HPA) 根据负载自动调整 Pod 数量。 使用 Cluster Autoscaler 根据资源需求自动调整节点数量。 备份与恢复：\n定期备份 etcd 数据存储，以防止数据丢失。 使用 Velero 等工具进行应用级别备份和恢复。 安全性：\n配置 RBAC（角色权限控制）确保访问控制。 使用网络策略（Network Policies）隔离不同命名空间的流量。 定期扫描镜像漏洞，确保镜像安全。 通过这些步骤，我们可以确保 Kubernetes 集群稳定、高效、安全地运行，从而为容器化应用提供强大的支撑平台。\n","permalink":"https://tomorrowthief.github.io/posts/devops/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003eDevops 从18年左右发展至今已经非常的成熟。可以作为一个独立职业，因为里面有很多细节。作为互联网软件开发者，我从开发的视角梳理下一些应知应会的框架，主要达到一个能使用，能了解架构，出了问题大概知道在哪个环节。具体细节暂时不追求。\u003c/p\u003e\n\u003ch2 id=\"从-docker-开始\"\u003e从 Docker 开始\u003c/h2\u003e\n\u003cp\u003eDocker，是一种容器化的概念，属于虚拟化技术的一种形式。以颗粒度更小的方式，隔离性也更好的方式完成宿主机的资源榨取。他与虚拟机的核心区别是\u003c/p\u003e\n\u003cp\u003eDocker与虚拟机的核心区别主要在于以下几个方面：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e架构层级\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e虚拟机（Virtual Machine, VM）\u003c/strong\u003e：虚拟机在宿主操作系统之上运行一个完整的客户操作系统。它使用Hypervisor（如VMware、KVM、Hyper-V等）来虚拟化硬件资源，每个虚拟机都有自己的内核、操作系统和应用程序。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDocker容器\u003c/strong\u003e：Docker容器在宿主操作系统之上运行，但它们与宿主共享相同的操作系统内核。容器是通过容器引擎（如Docker）来管理和隔离的。每个容器包含应用程序及其所有依赖项，但不包含完整的操作系统。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e资源利用效率\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e虚拟机\u003c/strong\u003e：由于每个虚拟机都需要一个完整的操作系统，因此启动和运行时会消耗更多的内存和CPU资源。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDocker容器\u003c/strong\u003e：由于所有容器共享宿主操作系统的内核，启动时间更快，资源开销也更小。这使得容器更加轻量级，可以在同样的硬件上运行更多实例。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e启动时间\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e虚拟机\u003c/strong\u003e：由于需要启动一个完整的操作系统，虚拟机通常需要数分钟时间才能完全启动并准备好使用。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDocker容器\u003c/strong\u003e：因为没有完整的OS启动过程，Docker容器通常可以在几秒钟内完成启动。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e隔离性与安全性\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e虚拟机\u003c/strong\u003e：提供了强隔离，因为每个VM运行在完全独立的环境中，包括独立的内核。因此，安全性较高。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDocker容器\u003c/strong\u003e：虽然提供了进程级别的隔离，但仍共享宿主OS内核，因此理论上存在一些安全风险。不过，通过适当配置和使用工具（如SELinux、AppArmor等），可以增强安全性。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e存储与持久化数据管理方式\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e虚拟机\u003c/strong\u003e：通常使用虚拟磁盘文件来存储数据，这些文件可以独立于其他VM进行管理。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDocker容器\u003c/strong\u003e：使用卷（volumes）和绑定挂载（bind mounts）来持久化数据，这些可以被多个容器共享或独立管理。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e总而言之，Docker作为一种轻量级、便捷、高效且快速部署的方法，在云原生应用开发中得到了广泛应用。而虚拟机则仍然适用于需要强隔离、安全要求高以及需要运行不同类型操作系统等场景。\u003c/p\u003e\n\u003cp\u003eDocker的核心原理是:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDocker的核心原理是利用操作系统级的虚拟化技术（即容器化技术）来创建、部署和运行应用程序。具体来说，Docker 的核心原理包括以下几个方面：\u003c/p\u003e\u003c/blockquote\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eNamespace（命名空间）隔离\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDocker 使用 Linux 内核的命名空间（Namespace）功能来实现进程隔离。这些命名空间包括 UTS（主机和域名）、IPC（进程间通信）、PID（进程 ID）、Network（网络）、Mount（文件系统挂载点）等。\u003c/li\u003e\n\u003cli\u003e每个容器都有独立的命名空间，因此它们之间不会互相干扰，提供了类似虚拟机的隔离效果。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eCgroups（控制组）资源控制\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCgroups 是 Linux 内核提供的一种机制，用于限制、记录和隔离单个进程组的资源使用情况。Docker 使用 Cgroups 来限制容器可以使用的 CPU、内存、磁盘 I/O 等资源。\u003c/li\u003e\n\u003cli\u003e通过这种方式，Docker 能够确保每个容器在资源分配上互不干扰，并且可以避免某个容器滥用系统资源。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eUnion File System（联合文件系统）\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDocker 使用联合文件系统，如 AUFS、OverlayFS 等，来实现镜像和容器的分层存储。每个 Docker 镜像由多层组成，每一层都是只读的，当需要对镜像进行修改时，会在顶层添加一个可写层。\u003c/li\u003e\n\u003cli\u003e这种分层设计不仅提高了存储效率，还使得镜像可以快速构建和共享。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eContainer Image（容器镜像）\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e容器镜像是一个包含应用程序及其所有依赖项的只读模板。Docker 容器是从这些镜像创建出来的一种运行实例。\u003c/li\u003e\n\u003cli\u003e镜像可以通过 Dockerfile 定义，并且支持版本管理，这使得应用程序环境变得可移植且易于复制。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eContainer Runtime\u003c/strong\u003e：\u003c/p\u003e","title":"Devops概念梳理"},{"content":"背景 近期工作中做了 LLM 长记忆功能，对此中的思路，技术做下总结。顺便为了练习自己的系统设计能力，这里按照系统设计的方式来整理\n什么是长记忆 简单来说就是让大模型具备记忆功能，记住某个人。产品形态上可以是个人助手。不同于某次会话上下文记忆，长记忆具备的特点：\n跟随个人的：我们目前常见的短期记忆只是跟随某次会话 时间长：1年，5年，10年，……，终生 个人信息相关的：比如个人爱好，心情变化，健康，工作，生活等这些属于个人记忆。客观信息事实信息比如：美国在北美洲，地球是圆的等这些不需要作为记忆信息。 多种类型的：如上条有不同类型的记忆，不同类型的记忆里处理方式有很大差异，比如：日程相关的需要处理时间，绝对时间的转换，个人爱好相关的，比较简单，直接用类似图谱的三元组信息即可，办公工作内容型的记忆类似。 功能点及非功能点梳理 总体其实为了实现个人助手的产品功能。这个助手在产品形态上是一个普通对话机器人，系统的具备的功能及非功能点需求大致如下：\n功能点 登录，因为是私人助手嘛，得知道用户是谁。 对话：这个不用说了，是助手的主题功能 配置功能，因为记忆有很多种类型，在助手里最好有配置，比如我想主要是工作，那日程安排比较重要，生活。如果多有记忆都要配置，那就是一个超级个人助手 记忆生产：根据配置信息，做不同类型的记忆提取存储 记忆消费：是指根据记忆：做下健康管理，饮食管理，工作学习计划，日程计划，等等。 非功能点 短期能同时处理 1w+ 人数的并发，长期的话人数可能扩充到 10W+，甚至更多。每天可能有 50W 的请求 响应时间：在记忆消费时能做到 3s - 5s 内有响应，3s-30s 内响应完成。 数据规模，根据每个人的配置，记忆长短不同，数据规模有不同要求 方案 工作流程图\n如图所示。总体为一个 RAG 流程，其中核心是记忆引擎的部分。由于rag流程基础的东西，在社区里做的比较多，也比较简单，不做过多强调。核心强调记忆引擎的东西。\n记忆引擎 记忆引擎里完成的功能：\n记忆生产 根据配置信息生产一些垂类记忆 记忆存储 把记忆抽出来后 记忆消费 根据用户的问题，召回相关的记忆，并做简单推理规划 记忆生产 这里输入是会话信息，需要做的是从会话信息里提取记忆实体。主要涉及到自然语言处理的部分。 知识图谱，我们使用知识图谱来完成记忆的载体。\n知识图谱的实体抽取，以及图数据库语法都是用额外的大模型来推理完成\n提示词设计 // 信息抽取 ` 你是一个信息提取专家 用户的输入如下：{query} 实体信息： ` // 记忆更新 ` 你是一个图数据专家，请生成neo4j的sql语句 历史记忆如下：{memories} 新的记忆如下：{memory} sql: ` 这里只给出部分，因为其他一些垂类的内容。其他还有很多，也算是核心。\n记忆消费 这里就是拼装提示词，召回后相关信息，做一下记忆拼接，最终的提示词\n大概如下\n`历史记忆如下: {memories} 问题: {query} ` 把记忆引擎抽离出来一个独立服务 这个记忆引擎可以抽你出来一个独立服务，给其他提供服务。\n未来如果有类人机器人出现，这个引擎可以作为其大脑的一部分。\n小节 本质上记忆引擎里的核心还是提示词，属于是：用大模型本身去解决大模型的问题。是不是有点类似于：我不是要你的钱，我只是拿你的钱办你的事。和珅表示这事我熟悉\n技术选型 后端：Python FastApi 存储：图数据库，向量数据库，Postgresql 前端：React Nextjs\n未来规划 交互上更加拟人一些，比如加入 tts，以及 stt\n社区方案 mem0 我在实践过程中严重依赖了这个方案，不得不说社区力量还是强大\n总结 在实际中体验下来，最终方案已经基本能用。提交给产品后，收获到了一些正向反馈。目前这个产品可以定位为超级个人助理。可以配置记忆倾向点，也可以手动录入一些记忆信息，以及一些非结构化的记忆。\n方案思路很简单，调优巨复杂。做过的估计都有体会，这也是现阶段很多AI应用的通用问题。所以会涌现出很多奇淫巧技让这些效果变好，或许这就是技术存在的意义吧：在有限的条件下尽量产生价值\n方案上还是会演进的，因为目前总体上还是提示词工程的玩法。这种模式会受到大模型本身技术发展影响的。大模型的窗口，推理精读都会影响我们的方案设计。\nAny Way 无论如何。在 AI 时代下，此类产品会越来越多，我们一定要利用好这些产品来辅助提升我们的效率。让我们自己变成超级个体，一个人相当于一个团队。\n","permalink":"https://tomorrowthief.github.io/posts/ai-longterm-memory/","summary":"\u003ch1 id=\"背景\"\u003e背景\u003c/h1\u003e\n\u003cp\u003e近期工作中做了 LLM 长记忆功能，对此中的思路，技术做下总结。顺便为了练习自己的系统设计能力，这里按照系统设计的方式来整理\u003c/p\u003e\n\u003ch2 id=\"什么是长记忆\"\u003e什么是长记忆\u003c/h2\u003e\n\u003cp\u003e简单来说就是让大模型具备记忆功能，记住某个人。产品形态上可以是个人助手。不同于某次会话上下文记忆，长记忆具备的特点：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e跟随个人的：我们目前常见的短期记忆只是跟随某次会话\u003c/li\u003e\n\u003cli\u003e时间长：1年，5年，10年，……，终生\u003c/li\u003e\n\u003cli\u003e个人信息相关的：比如个人爱好，心情变化，健康，工作，生活等这些属于个人记忆。客观信息事实信息比如：美国在北美洲，地球是圆的等这些不需要作为记忆信息。\u003c/li\u003e\n\u003cli\u003e多种类型的：如上条有不同类型的记忆，不同类型的记忆里处理方式有很大差异，比如：日程相关的需要处理时间，绝对时间的转换，个人爱好相关的，比较简单，直接用类似图谱的三元组信息即可，办公工作内容型的记忆类似。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"功能点及非功能点梳理\"\u003e功能点及非功能点梳理\u003c/h2\u003e\n\u003cp\u003e总体其实为了实现个人助手的产品功能。这个助手在产品形态上是一个普通对话机器人，系统的具备的功能及非功能点需求大致如下：\u003c/p\u003e\n\u003ch3 id=\"功能点\"\u003e功能点\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e登录，因为是私人助手嘛，得知道用户是谁。\u003c/li\u003e\n\u003cli\u003e对话：这个不用说了，是助手的主题功能\u003c/li\u003e\n\u003cli\u003e配置功能，因为记忆有很多种类型，在助手里最好有配置，比如我想主要是工作，那日程安排比较重要，生活。如果多有记忆都要配置，那就是一个超级个人助手\u003c/li\u003e\n\u003cli\u003e记忆生产：根据配置信息，做不同类型的记忆提取存储\u003c/li\u003e\n\u003cli\u003e记忆消费：是指根据记忆：做下健康管理，饮食管理，工作学习计划，日程计划，等等。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"非功能点\"\u003e非功能点\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e短期能同时处理 1w+ 人数的并发，长期的话人数可能扩充到 10W+，甚至更多。每天可能有 50W 的请求\u003c/li\u003e\n\u003cli\u003e响应时间：在记忆消费时能做到 3s - 5s 内有响应，3s-30s 内响应完成。\u003c/li\u003e\n\u003cli\u003e数据规模，根据每个人的配置，记忆长短不同，数据规模有不同要求\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"方案\"\u003e方案\u003c/h2\u003e\n\u003cp\u003e工作流程图\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/long-term-memory.png\" alt=\"Alt text\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e如图所示。总体为一个 RAG 流程，其中核心是记忆引擎的部分。由于rag流程基础的东西，在社区里做的比较多，也比较简单，不做过多强调。核心强调记忆引擎的东西。\u003c/p\u003e\n\u003ch2 id=\"记忆引擎\"\u003e记忆引擎\u003c/h2\u003e\n\u003cp\u003e记忆引擎里完成的功能：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e记忆生产\n根据配置信息生产一些垂类记忆\u003c/li\u003e\n\u003cli\u003e记忆存储\n把记忆抽出来后\u003c/li\u003e\n\u003cli\u003e记忆消费\n根据用户的问题，召回相关的记忆，并做简单推理规划\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"记忆生产\"\u003e记忆生产\u003c/h3\u003e\n\u003cp\u003e这里输入是会话信息，需要做的是从会话信息里提取记忆实体。主要涉及到自然语言处理的部分。\n知识图谱，我们使用知识图谱来完成记忆的载体。\u003c/p\u003e\n\u003cp\u003e知识图谱的实体抽取，以及图数据库语法都是用额外的大模型来推理完成\u003c/p\u003e\n\u003ch4 id=\"提示词设计\"\u003e提示词设计\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 信息抽取\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"sb\"\u003e`\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sb\"\u003e        你是一个信息提取专家\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sb\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sb\"\u003e        用户的输入如下：{query}\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sb\"\u003e        实体信息：\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sb\"\u003e    `\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 记忆更新\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"sb\"\u003e`\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sb\"\u003e        你是一个图数据专家，请生成neo4j的sql语句\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sb\"\u003e        历史记忆如下：{memories}\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sb\"\u003e        新的记忆如下：{memory}\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sb\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sb\"\u003e        sql:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"sb\"\u003e    `\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这里只给出部分，因为其他一些垂类的内容。其他还有很多，也算是核心。\u003c/p\u003e","title":"LLM 长记忆工具总结"},{"content":"背景 做了大半年左右的后端开发后，总结下相关感受。\n技术栈：Python/Nodejs + React\n行业背景：LLM 应用， RAG， Agent\n后端开发思路 后端关注面更广范，几乎要关注整个应用软件运行所需所有的环节： 运维，应用，业务，服务，UI 等。\n其中核心工作流在于：充分理解需求，转换业务需求到系统的功能性设计及非功能指标设计。\n功能设计上主要关注：数据结构，类包，业务模块，工作流等 非功能性关注：性能，并发，安全，稳定等 玩的是数据 数据算是核心中的核心了。所有的业务基础都是按照这个来的\n关系型业务 mysql 或者 pg，选一个吧，这里我还没遇到两者特别大的差异的地方，因为我的业务场景里没那么复杂\n这里主要考虑：表结构设计，索引设计。\n如果到一定规模考虑 分区，分表，分库\n实际业务中大多需要找一个 ORM 库来完成在应用里方便的操作。\n如果有 Redis 或者其他异步复杂的事务处理，需要进一步考虑数据一致性。\n非关系 Redis，Es，Mongodb，图数据库\n日志相关的一般存放到 mongodb 或者es，由于他们在倒排索引的效果做的比较好，方便快速全文索引，海量存储。\nRedis：内存数据库，来缓解在 mysql里不经常变动，又频繁查询的操作压力。当然他也可以做一些简单的消息中间件等\n图数据库\n在一些场景里需要做知识图谱，做关系，图数据库特别适合。这里核心是实体关系等三元组信息抽取，已有知识更新。得益于大模型这个第二大脑的配合，可以通过提示词让LLM帮我们去做实体抽取，三元组信息变得简单很多\n小结 这块也是一个非常大的技术体系，往深走的话需要专题讨论。\n我这边是入门不久，着重看了 Mysql 执行引擎的内容，B+ 索引的来由。练习了常用 SQL 语法（leetcode 50高频sql）\n由于之前了解过大数据基础知识，所以对于我前端出身学习这块，难度不大。\n一些中间件 消息中间件 几乎是必须的，做异步，服务结构等 任务队列 做性能，并发等 日志，错误处理等 微服务体系 很多公司其他基础模块都是基于微服务的方式提供的。系统扩充到一定程度肯定少不了微服务架构的梳理\n得益于 Service Mesh 这种微服务2.0架构。做上层应用变得异常简单了。日志，监控，服务注册调用 等都在 SideCar里\n我之前有过 Nodejs 接入微服务体系的经验，所以这块难度也不是特比大\n计算机基础 计算机组成：cpu，gpu，硬盘，内存 操作系统：进程线程协程等，资源管理，IO管理：网络/文件 编译：前端：分词，语法分析，语法树，后端：机器平台生成 分布式-时间空间互换 这里我觉得是计算机性能上一个很重要的思路，在优先的单机资源下实现高复杂度计算的模式。大数据的基石 Hadoop也是这个核心思想。\n核心竞争力 以前端为主要工作内容体系下，为什么要突破下后端开发的能力？\n生存需要：前端技术发展到一定程度，除非是往某个领域特定发展，但是很容易变成屠龙之术。 我认为市场上需求, 复杂度大多还是后端 即便作为独立开发者也需要后端更多 本来技术上就不存在什么前端，后端，或者其他端。本来的角色应该是软件开发者，问题解决者存在 一切都在变，你敢不变？ 当前AI大背景下，学习新知识，突破边界变得非常简单 所以当前这个环境，我的核心竞争力在于：强悍的工程能力，基于此的问题解决能力，基于此的产品运营的敏锐度\n总结 在 AI 时代软件开发者可以很高效切换一些技术栈，但是一些基础的理论一定要掌握好，否则 ai 可能会把我们带歪。这些基础理论包括：计算机组成，计算机运行原理，现代操作系统，算法。还有就是上文里提出来的工程能力\n最后我的观点是：不要过分在某个点上较真，能够达到自己的目标就是好的。\n可以不屠龙，但是不能不掌握屠龙术\n","permalink":"https://tomorrowthief.github.io/posts/ai-backend-dev/","summary":"\u003ch1 id=\"背景\"\u003e背景\u003c/h1\u003e\n\u003cp\u003e做了大半年左右的后端开发后，总结下相关感受。\u003c/p\u003e\n\u003cp\u003e技术栈：Python/Nodejs + React\u003c/p\u003e\n\u003cp\u003e行业背景：LLM 应用， RAG， Agent\u003c/p\u003e\n\u003ch2 id=\"后端开发思路\"\u003e后端开发思路\u003c/h2\u003e\n\u003cp\u003e后端关注面更广范，几乎要关注整个应用软件运行所需所有的环节： 运维，应用，业务，服务，UI 等。\u003c/p\u003e\n\u003cp\u003e其中核心工作流在于：充分理解需求，转换业务需求到系统的功能性设计及非功能指标设计。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e功能设计上主要关注：数据结构，类包，业务模块，工作流等\u003c/li\u003e\n\u003cli\u003e非功能性关注：性能，并发，安全，稳定等\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"玩的是数据\"\u003e玩的是数据\u003c/h2\u003e\n\u003cp\u003e数据算是核心中的核心了。所有的业务基础都是按照这个来的\u003c/p\u003e\n\u003ch3 id=\"关系型业务\"\u003e关系型业务\u003c/h3\u003e\n\u003cp\u003emysql 或者 pg，选一个吧，这里我还没遇到两者特别大的差异的地方，因为我的业务场景里没那么复杂\u003c/p\u003e\n\u003cp\u003e这里主要考虑：表结构设计，索引设计。\u003c/p\u003e\n\u003cp\u003e如果到一定规模考虑 分区，分表，分库\u003c/p\u003e\n\u003cp\u003e实际业务中大多需要找一个 ORM 库来完成在应用里方便的操作。\u003c/p\u003e\n\u003cp\u003e如果有 Redis 或者其他异步复杂的事务处理，需要进一步考虑数据一致性。\u003c/p\u003e\n\u003ch3 id=\"非关系\"\u003e非关系\u003c/h3\u003e\n\u003cp\u003eRedis，Es，Mongodb，图数据库\u003c/p\u003e\n\u003cp\u003e日志相关的一般存放到 mongodb 或者es，由于他们在倒排索引的效果做的比较好，方便快速全文索引，海量存储。\u003c/p\u003e\n\u003cp\u003eRedis：内存数据库，来缓解在 mysql里不经常变动，又频繁查询的操作压力。当然他也可以做一些简单的消息中间件等\u003c/p\u003e\n\u003cp\u003e图数据库\u003c/p\u003e\n\u003cp\u003e在一些场景里需要做知识图谱，做关系，图数据库特别适合。这里核心是实体关系等三元组信息抽取，已有知识更新。得益于大模型这个第二大脑的配合，可以通过提示词让LLM帮我们去做实体抽取，三元组信息变得简单很多\u003c/p\u003e\n\u003ch3 id=\"小结\"\u003e小结\u003c/h3\u003e\n\u003cp\u003e这块也是一个非常大的技术体系，往深走的话需要专题讨论。\u003c/p\u003e\n\u003cp\u003e我这边是入门不久，着重看了 Mysql 执行引擎的内容，B+ 索引的来由。练习了常用 SQL 语法（leetcode 50高频sql）\u003c/p\u003e\n\u003cp\u003e由于之前了解过大数据基础知识，所以对于我前端出身学习这块，难度不大。\u003c/p\u003e\n\u003ch2 id=\"一些中间件\"\u003e一些中间件\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e消息中间件\n几乎是必须的，做异步，服务结构等\u003c/li\u003e\n\u003cli\u003e任务队列\n做性能，并发等\u003c/li\u003e\n\u003cli\u003e日志，错误处理等\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"微服务体系\"\u003e微服务体系\u003c/h2\u003e\n\u003cp\u003e很多公司其他基础模块都是基于微服务的方式提供的。系统扩充到一定程度肯定少不了微服务架构的梳理\u003c/p\u003e\n\u003cp\u003e得益于 Service Mesh 这种微服务2.0架构。做上层应用变得异常简单了。日志，监控，服务注册调用 等都在 SideCar里\u003c/p\u003e\n\u003cp\u003e我之前有过 Nodejs 接入微服务体系的经验，所以这块难度也不是特比大\u003c/p\u003e\n\u003ch2 id=\"计算机基础\"\u003e计算机基础\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e计算机组成：cpu，gpu，硬盘，内存\u003c/li\u003e\n\u003cli\u003e操作系统：进程线程协程等，资源管理，IO管理：网络/文件\u003c/li\u003e\n\u003cli\u003e编译：前端：分词，语法分析，语法树，后端：机器平台生成\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"分布式-时间空间互换\"\u003e分布式-时间空间互换\u003c/h2\u003e\n\u003cp\u003e这里我觉得是计算机性能上一个很重要的思路，在优先的单机资源下实现高复杂度计算的模式。大数据的基石 Hadoop也是这个核心思想。\u003c/p\u003e","title":"后端开发经验-阶段性总结思考"},{"content":" 林语堂苏东坡读后感\n进入偶然原因看了些苏词，同时也看了林语堂的苏轼传，这里记录下所感，所想。重点不是描述豪放的苏词，而是苏轼这种人才的优点，缺点。苏轼若是在当代社会又是咋样的？\n大概过下「苏轼传」 苏轼传记有很多，各种角度去描写的，我选择了林语堂的这本。林语堂是民国时期著名文科生，特点中外双休，说来奇怪，他写的苏轼传是用英语写的，或许是为了向世界科普这个中国巨星。而我读的却是一个国人的译本。既然是面向世界的，选择的角度肯定不太一样了，也会拿西方的文豪大家与苏轼对比。\n这本书里不像一些其他书，用很多首苏词来作为切入点，描写。他直接以苏轼的视角，按照时间线，穿插一些中间人物大事记（弟弟苏澈，伯乐欧阳修，政敌王安石，他的三任夫人，等等），来完成的，也加了不少北宋的政治经济背景，各个皇帝的特点等。所以读下来就是一个北宋中后期的国家命脉缩略。\n不止于诗词 苏轼写词，写诗，是他的立命之本。他的年代是文学的时代，家族里也有好的基因，氛围。他叔已经是当官的，他爸虽然无官，但是唐宋八大家之一，他爸的六国论，他妈的思想已经不是普通妇人的思想了。\n如此的家境放到现在，如果不是特别不着调，抬也能给抬到一个合适的位置。况且他和弟弟在立命之学的年纪里一起下了重功夫，使得他基础太扎实了，所有文字创作信手拈来。任何行业都需要一个扎实的基本功，才能有上层轻松的创作，作家，歌手，程序员，运动员，哪个不是呢?\n他呢，让人津津乐道的不止于诗词。乐天派，豪放派的作风。到哪里都有朋友。喜爱喝酒。也会接触名妓。说到这里，我是觉得不能单纯看他的这些特点，结合他背景：少年成才，国家顶级人才，得到皇帝的大力认可，可谓前途无量。体验过生而为人的巅峰，这个自信自然养成了，也早已脱离了为生计奔波的烦恼。所以即便有在政治斗争里的一贬再贬再再贬，那都不是事。\n林语堂描写他的政论也是一流的，这个是位难得，宋朝不缺文学，但是文学和政论都很好的就少了，范仲淹，欧阳修，司马光，王安石都算是，苏轼当然也算，他的特点似乎是更接地气，更是站在底层大众这一侧。实事求是，真正做事的人。\n他对生活很热爱，对细节观察也很到位，体现在诗词里，也体现在他的书法与国画里，他是南方国画鼻祖。国画里对动物的传神，对山水天人合一的追求，要求作者必须对细节观察做到细致入微。\n能跟任何人玩到一起 书里一个章节：和尚，酒与名妓，来形容他的爱好，形容的真好。他结交了很多僧人，与他们聊思想，交换灵魂。或许这点也是构成他性格的重要瓦片。他朋友圈里很多都是追随他的，比如苏门四学士等。\n皇帝点过他的名，嫉妒者们对他一再打压，太后出于女人第六感，认为他是一个可靠之才，恢复他的官位。他有很多酒友每到一个地方，都不缺朋友，分布到各阶层里。\n他与头号政敌王安石，最后也能畅谈下想法。\n他也是一个普通人 本质上他也是追求名利，没有得到的时候也会迷茫，有了机会的时候也会努力抓住的。在遇到乌台诗案的时候，他也是慌不知所措，内心是恐惧的，害怕死亡，更害怕家人受到牵连。\n作为一个动物，他也是爱好吃喝的。人生中后期也追求长生不老之术，每次被贬也都带了很多家人一起，这点来看条件已经不错了，比起当时草民生活上强了太多。\n也正是一个普通人的特点，才愿意被更多人追随吧，才能被千年后的我们依然喜欢。\n再无苏轼 一个现代社会里很难再出现苏轼这样的人了。首先培养出这样的人才需要巨大的精力，其次在阶层固化，大众追求的理想已经很难到达苏轼这种高度了。于我们苏轼的故事当作聊天语料，当作精神参考，其作品当作我们引经据典的素材，足以。\n","permalink":"https://tomorrowthief.github.io/posts/sudongpo/","summary":"\u003cblockquote\u003e\n\u003cp\u003e林语堂苏东坡读后感\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e进入偶然原因看了些苏词，同时也看了林语堂的苏轼传，这里记录下所感，所想。重点不是描述豪放的苏词，而是苏轼这种人才的优点，缺点。苏轼若是在当代社会又是咋样的？\u003c/p\u003e\n\u003ch2 id=\"大概过下苏轼传\"\u003e大概过下「苏轼传」\u003c/h2\u003e\n\u003cp\u003e苏轼传记有很多，各种角度去描写的，我选择了林语堂的这本。林语堂是民国时期著名文科生，特点中外双休，说来奇怪，他写的苏轼传是用英语写的，或许是为了向世界科普这个中国巨星。而我读的却是一个国人的译本。既然是面向世界的，选择的角度肯定不太一样了，也会拿西方的文豪大家与苏轼对比。\u003c/p\u003e\n\u003cp\u003e这本书里不像一些其他书，用很多首苏词来作为切入点，描写。他直接以苏轼的视角，按照时间线，穿插一些中间人物大事记（弟弟苏澈，伯乐欧阳修，政敌王安石，他的三任夫人，等等），来完成的，也加了不少北宋的政治经济背景，各个皇帝的特点等。所以读下来就是一个北宋中后期的国家命脉缩略。\u003c/p\u003e\n\u003ch2 id=\"不止于诗词\"\u003e不止于诗词\u003c/h2\u003e\n\u003cp\u003e苏轼写词，写诗，是他的立命之本。他的年代是文学的时代，家族里也有好的基因，氛围。他叔已经是当官的，他爸虽然无官，但是唐宋八大家之一，他爸的六国论，他妈的思想已经不是普通妇人的思想了。\u003c/p\u003e\n\u003cp\u003e如此的家境放到现在，如果不是特别不着调，抬也能给抬到一个合适的位置。况且他和弟弟在立命之学的年纪里一起下了重功夫，使得他基础太扎实了，所有文字创作信手拈来。任何行业都需要一个扎实的基本功，才能有上层轻松的创作，作家，歌手，程序员，运动员，哪个不是呢?\u003c/p\u003e\n\u003cp\u003e他呢，让人津津乐道的不止于诗词。乐天派，豪放派的作风。到哪里都有朋友。喜爱喝酒。也会接触名妓。说到这里，我是觉得不能单纯看他的这些特点，结合他背景：少年成才，国家顶级人才，得到皇帝的大力认可，可谓前途无量。体验过生而为人的巅峰，这个自信自然养成了，也早已脱离了为生计奔波的烦恼。所以即便有在政治斗争里的一贬再贬再再贬，那都不是事。\u003c/p\u003e\n\u003cp\u003e林语堂描写他的政论也是一流的，这个是位难得，宋朝不缺文学，但是文学和政论都很好的就少了，范仲淹，欧阳修，司马光，王安石都算是，苏轼当然也算，他的特点似乎是更接地气，更是站在底层大众这一侧。实事求是，真正做事的人。\u003c/p\u003e\n\u003cp\u003e他对生活很热爱，对细节观察也很到位，体现在诗词里，也体现在他的书法与国画里，他是南方国画鼻祖。国画里对动物的传神，对山水天人合一的追求，要求作者必须对细节观察做到细致入微。\u003c/p\u003e\n\u003ch2 id=\"能跟任何人玩到一起\"\u003e能跟任何人玩到一起\u003c/h2\u003e\n\u003cp\u003e书里一个章节：和尚，酒与名妓，来形容他的爱好，形容的真好。他结交了很多僧人，与他们聊思想，交换灵魂。或许这点也是构成他性格的重要瓦片。他朋友圈里很多都是追随他的，比如苏门四学士等。\u003c/p\u003e\n\u003cp\u003e皇帝点过他的名，嫉妒者们对他一再打压，太后出于女人第六感，认为他是一个可靠之才，恢复他的官位。他有很多酒友每到一个地方，都不缺朋友，分布到各阶层里。\u003c/p\u003e\n\u003cp\u003e他与头号政敌王安石，最后也能畅谈下想法。\u003c/p\u003e\n\u003ch2 id=\"他也是一个普通人\"\u003e他也是一个普通人\u003c/h2\u003e\n\u003cp\u003e本质上他也是追求名利，没有得到的时候也会迷茫，有了机会的时候也会努力抓住的。在遇到乌台诗案的时候，他也是慌不知所措，内心是恐惧的，害怕死亡，更害怕家人受到牵连。\u003c/p\u003e\n\u003cp\u003e作为一个动物，他也是爱好吃喝的。人生中后期也追求长生不老之术，每次被贬也都带了很多家人一起，这点来看条件已经不错了，比起当时草民生活上强了太多。\u003c/p\u003e\n\u003cp\u003e也正是一个普通人的特点，才愿意被更多人追随吧，才能被千年后的我们依然喜欢。\u003c/p\u003e\n\u003ch2 id=\"再无苏轼\"\u003e再无苏轼\u003c/h2\u003e\n\u003cp\u003e一个现代社会里很难再出现苏轼这样的人了。首先培养出这样的人才需要巨大的精力，其次在阶层固化，大众追求的理想已经很难到达苏轼这种高度了。于我们苏轼的故事当作聊天语料，当作精神参考，其作品当作我们引经据典的素材，足以。\u003c/p\u003e","title":"苏东坡"},{"content":"为什么要学 Python 最近开始接触 Ai 相关的东西。主要是应用层的内容，比如 RAG Agent 等。此类应用特点：无需太多安全性能，偏向于工具，这块技术发展变化比较迅速，大模型日新月异，应用层技术也跟随变化较多。\n根据此特点选择脚本类型语言作为应用层开发语言。待选语言有 Nodejs python。 个人虽熟悉 Nodejs，但鉴于 Python 生态较好 性能较好等，最后决定 Python。\nPython 综述 Python 第一版本发布于 2000年，目前在 Tiobe 排行榜里人数排名第一，社区热度也升为第一。\n定位：高级语言，通用能力编程语言 特性：动态语言，基于解释器，gc 等 范式：函数编程，面向对象，面向过程 主要在 数据处理，计算，Web等发挥作用，AI 领域使用很多， Web 开发也有很多场景\n运行模式支持 多进程，多线程，协程\n执行流程 这一章直接问了 gpt，下面都是 ai 的回答\n在Python中，程序的执行流程通常是按照以下步骤进行的：\n解释器读取源代码：Python解释器会逐行读取源代码文件，并将其转换为字节码形式，这是一种中间表示形式，可以被Python虚拟机执行。\n词法分析和语法分析：在这个阶段，Python解释器会将源代码分解成单词（Token）并构建语法树。这个过程包括词法分析（将源代码分解为Token）和语法分析（根据语法规则构建语法树）。\n编译字节码：Python解释器将语法树转换为字节码。字节码是一种中间形式，类似于机器码，但是不是针对特定的硬件架构。\n执行字节码：Python虚拟机执行字节码指令。这些指令会被逐条执行，从而实现程序的逻辑。\n动态类型检查：Python是一种动态类型语言，因此在运行时会进行类型检查。如果类型不匹配，会引发类型错误。\n垃圾回收：Python具有自动内存管理机制，包括垃圾回收。垃圾回收器会定期检查不再使用的内存对象，并释放它们。\n异常处理：在程序执行过程中，如果发生异常，Python会查找合适的异常处理程序。如果找不到合适的处理程序，程序会中止并打印错误信息。\n程序结束：当程序执行完所有的代码或遇到显式的退出语句（如return或sys.exit()）时，程序结束执行。\n语法 跟我熟悉的 JS 差别很大，总体感受很灵活。基础的比如：变量 循环，函数的定义参数。可以直接看官方文档\n个人感觉 1-2 周左右时间，即可上手基础开发。\n这里只提下我印象比较深刻的函数部分： 通过 def 定义，通过缩进写函数体，当然也可以添加类型系统，比如入参数类型，返回类型。基础demo如下\ndef add(num1, num2) return num1 + num2 sum = add(1, 2) print(sum) 函数参数可以用 * *key_yars 来动态接收\n异步编程 Python里的异步编程也经历过一些迭代，基础上是基于时间循环的协程操作。早期用gevent，现在也有很多在用，当下内置模块 asyncio 也实现了相关的封装，可以更加方便的定义异步任务，执行异步任务。\n相比我比较熟悉的 Javascript 里浏览器和 Nodejs 运行时的模式，Python多少还是有点不同： Js 语言里都是默认开启异步的，因为在 js 引擎执行开始就启动了事件循环，而Python不同，需要手动的去开启事件循环来启动异步操作。从这个角度来看，Python 提供了很多底层的 API，让使用者灵活的控制。好处是可以更灵活，性能上更好些，坏处是需要很多底层知识来支撑，否则用不好的话，反倒影响性能\n基本概念 事件循环：管理和调度异步任务的核心组件。 协程：使用 async def 定义的函数，可以在事件循环中异步运行。 任务：由事件循环调度的协程对象。 Future：表示一个异步操作的最终结果，类似于 JavaScript 中的 Promise。 示例 以下是一个简单的示例，展示了如何使用 asyncio 模块来创建和运行事件循环：\nimport asyncio async def say_hello(): print(\u0026#39;Hello\u0026#39;) await asyncio.sleep(1) print(\u0026#39;World\u0026#39;) async def main(): await asyncio.gather(say_hello(), say_hello()) # 获取默认事件循环并运行主协程 asyncio.run(main()) 解释 定义协程：使用 async def 定义了一个名为 say_hello 的协程，它在打印 Hello 后等待 1 秒，然后打印 World。 主协程：定义了一个名为 main 的协程，它使用 asyncio.gather 并发地运行两个 say_hello 协程。 运行事件循环：使用 asyncio.run 获取默认事件循环并运行 main 协程。 事件循环的工作原理 启动事件循环：当调用 asyncio.run(main()) 时，事件循环启动并开始运行 main 协程。 调度任务：事件循环调度 main 协程中的任务。在这个例子中，asyncio.gather 会并发地运行两个 say_hello 协程。 处理 I/O 操作：当协程遇到 I/O 操作（如 await asyncio.sleep(1)），事件循环会挂起该协程并切换到其他可运行的任务。 完成任务：当 I/O 操作完成时，事件循环会恢复被挂起的协程并继续执行。 结束事件循环：当所有任务完成时，事件循环停止。 更复杂的示例 以下是一个更复杂的示例，展示了如何处理多个异步任务和超时：\nimport asyncio async def fetch_data(delay, name): print(f\u0026#39;Starting {name}\u0026#39;) await asyncio.sleep(delay) print(f\u0026#39;Finished {name}\u0026#39;) async def main(): task1 = asyncio.create_task(fetch_data(2, \u0026#39;Task 1\u0026#39;)) task2 = asyncio.create_task(fetch_data(3, \u0026#39;Task 2\u0026#39;)) task3 = asyncio.create_task(fetch_data(1, \u0026#39;Task 3\u0026#39;)) await asyncio.wait([task1, task2, task3], timeout=2.5) # 运行事件循环 asyncio.run(main()) 解释 创建任务：使用 asyncio.create_task 创建了三个任务，每个任务在不同的延迟后完成。 等待任务：使用 asyncio.wait 并设置超时时间为 2.5 秒。如果某些任务在超时时间内未完成，它们将被取消。 输出结果 Starting Task 1 Starting Task 2 Starting Task 3 Finished Task 3 Finished Task 1 在这个例子中，Task 2 因为超时而未能完成。\n处理超时 如果你需要处理超时，可以使用 asyncio.TimeoutError：\nasync def main(): try: await asyncio.wait_for(fetch_data(3, \u0026#39;Task 2\u0026#39;), timeout=2) except asyncio.TimeoutError: print(\u0026#39;Task 2 timed out\u0026#39;) asyncio.run(main()) 本章小节 Python 的 asyncio 模块提供了强大的工具来编写高效的异步 I/O 代码。通过理解事件循环、协程和任务的工作原理，可以更好地编写和调试异步 Python 程序。\n比较有意思的是， Javascript 里并没有提供事件循环的底层 API，而 Python 却提供了很多。从这点来看Python灵活性更好，在需要充分榨干 cpu 的场景中会有更好的表现，就像 C++ 提供了垃圾回收的低层级API，而 Java 则直接用Jvm 的 gc 机制来做，使得 c++ 性能更强，更灵活, 当然编写难度也会提升，实际技术选型时要综合考虑。\n优秀框架库 Web服务开发： Flask FastAPI 任务队列： Celery 数据开发相关: Panda Numpy 深度学习： PyTorch Tenserflow 图数据库： Neo4j 总结 入门 python 还是比较容易。本文内容主要是我在做两个项目中 学习到的一些概念，知识点。感觉目前能成为一个中级 python 开发了。如果后面用了一些其他高级功能，再专题写一下具体的部分\n到了一定程度语言已经不是问题的关键了，怎么熟悉整个技术体系更重要，比如在Web服务开发领域：计算机组成，操组系统，编译原理，等基础概念，数据库，高并发，分布式这些架构。\n","permalink":"https://tomorrowthief.github.io/posts/ai-python/","summary":"\u003ch2 id=\"为什么要学-python\"\u003e为什么要学 Python\u003c/h2\u003e\n\u003cp\u003e最近开始接触 Ai 相关的东西。主要是应用层的内容，比如 RAG Agent 等。此类应用特点：无需太多安全性能，偏向于工具，这块技术发展变化比较迅速，大模型日新月异，应用层技术也跟随变化较多。\u003c/p\u003e\n\u003cp\u003e根据此特点选择脚本类型语言作为应用层开发语言。待选语言有 \u003ccode\u003eNodejs\u003c/code\u003e \u003ccode\u003epython\u003c/code\u003e。 个人虽熟悉 Nodejs，但鉴于 Python 生态较好 性能较好等，最后决定 Python。\u003c/p\u003e\n\u003ch2 id=\"python-综述\"\u003ePython 综述\u003c/h2\u003e\n\u003cp\u003ePython 第一版本发布于 2000年，目前在 Tiobe 排行榜里人数排名第一，社区热度也升为第一。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e定位：高级语言，通用能力编程语言\u003c/li\u003e\n\u003cli\u003e特性：动态语言，基于解释器，gc 等\u003c/li\u003e\n\u003cli\u003e范式：函数编程，面向对象，面向过程\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e主要在 数据处理，计算，Web等发挥作用，AI 领域使用很多， Web 开发也有很多场景\u003c/p\u003e\n\u003cp\u003e运行模式支持 多进程，多线程，协程\u003c/p\u003e\n\u003ch2 id=\"执行流程\"\u003e执行流程\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e这一章直接问了 gpt，下面都是 ai 的回答\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e在Python中，程序的执行流程通常是按照以下步骤进行的：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e解释器读取源代码：Python解释器会逐行读取源代码文件，并将其转换为字节码形式，这是一种中间表示形式，可以被Python虚拟机执行。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e词法分析和语法分析：在这个阶段，Python解释器会将源代码分解成单词（Token）并构建语法树。这个过程包括词法分析（将源代码分解为Token）和语法分析（根据语法规则构建语法树）。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e编译字节码：Python解释器将语法树转换为字节码。字节码是一种中间形式，类似于机器码，但是不是针对特定的硬件架构。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e执行字节码：Python虚拟机执行字节码指令。这些指令会被逐条执行，从而实现程序的逻辑。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e动态类型检查：Python是一种动态类型语言，因此在运行时会进行类型检查。如果类型不匹配，会引发类型错误。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e垃圾回收：Python具有自动内存管理机制，包括垃圾回收。垃圾回收器会定期检查不再使用的内存对象，并释放它们。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e异常处理：在程序执行过程中，如果发生异常，Python会查找合适的异常处理程序。如果找不到合适的处理程序，程序会中止并打印错误信息。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e程序结束：当程序执行完所有的代码或遇到显式的退出语句（如return或sys.exit()）时，程序结束执行。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"语法\"\u003e语法\u003c/h2\u003e\n\u003cp\u003e跟我熟悉的 JS 差别很大，总体感受很灵活。基础的比如：变量 循环，函数的定义参数。可以直接看\u003ca href=\"https://docs.python.org/zh-cn/3/reference/index.html\"\u003e官方文档\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e个人感觉 1-2 周左右时间，即可上手基础开发。\u003c/p\u003e\n\u003cp\u003e这里只提下我印象比较深刻的函数部分：\n通过 def 定义，通过缩进写函数体，当然也可以添加类型系统，比如入参数类型，返回类型。基础demo如下\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enum1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enum2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003enum1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003enum2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e函数参数可以用 \u003ccode\u003e*\u003c/code\u003e \u003ccode\u003e*key_yars\u003c/code\u003e 来动态接收\u003c/p\u003e","title":"Python 学习总结"},{"content":"近两年AI太火了，认真体验及分析后, 决定尽量跟上, 最少要把相关工具使用好。恰好工作中也在做相关工具，遂梳理之, 以加深对这块的理解。\n打败马车夫的不是汽车本身，而是会开车的司机\n生成式AI的爆发 AI 这个领域很早就开始了，这个理念也很早就有了，比如早期图像处理，语音识别，阿尔法go等。可以回溯之前很多年。为何最近两年开始爆火了。我认为原因有几点：\n技术突破: 大模型的底层基于神经网络的深度学习推出了 transformer 架构。改变了大模型深度学习的格局带来了质的飞跃 基础设施发展: 一个模型巨量的计算，消耗大量资源。硬件基础设施的发展能降低训练成本，试错成本，让更多想法去实现 数据的积累: 互联网发展至今产生了大量数据，可以作为训练知识来让模型学习，这些都是人类发展产生的财富。 简单说下 Transformer 最早是在论文 Attention is all you need 提出注意力的机，以解决在序列生成中，长序列情况下的精度，简单一点来说是通过空间位置编码，扩充之前神经网络里的一些信息，使得即使再有更多长度，也不会让精度下降。\n现代架构里添加了很多其他模块：比如多头自注意力机制，并行机制等。\n总之结果是：推理精读更好，训练效率更高。这是当今 AIGC 爆发的技术基础\n能改变什么 有人说任何行业都可以重新再做一遍\n人类的进步，从来离不开工具，有了轮子就有了车，马车，有了蒸汽机就有了汽车，这些都是革命性的改进，都是依赖工具的。工具改变了生产力，进一步质变为影响生产关系。促进了社会整体变化。\n总结下来当前影响最大的几个面：\n广告/自媒体行业的商业模式 剪辑，修图，这种体力活完全可以用AI帮忙做了\n教育教培，学习方式 对于家长可以用 AI 辅助教养小孩子，学生也可以方便的用AI自助学习。\n工作效率提升 有些细节直接用AI生成即可，员工负责更高一层的控制\n软件开发程序员 我本身就在程序员行当里，对这个提效深有体会\n局限性 正如人类能想象到的东西都是现有认知范围内现有知识体系内的东西一样，AI 学习能力目前还处于理解现有知识体系的状态。无法突破知识界限，只有在有限的知识范围内做一个最强大脑。 所以局限性在于，他只是一个只能基于现有知识的超强大脑，无法升维无法突破边界。 当然如果有了一个这样超强大脑，本身就是一件很厉害的事情。至于突破编辑，升维知识，这个还要考我们人类，然后再喂给AI，形成一个循环。\n一旦AI具备 公理，定律等级别的创新，是非常恐怖的，人类的一切迷惑将不再是迷惑，我是谁？来自哪里？要去哪里？上帝是谁，造物主是谁，各方神灵，神明又是谁？宇宙之外在哪里？生命是什么？为什么活着，为啥又要死去\n模型 百花齐放，百家争鸣。通用，垂类，领域模型等太多了，发展过于迅速，具体模型此处不多谈。\n要谈的是：\n深度学习模式的变革，基于 Transformer 架构的深度学习促进了当下模型厂商的发展，多层 Transformer 架构使得大模型更像人类大脑。 向量化，万事万物皆是向量，皆是数据，向量这个结构让事物之间的关系拉平了。就像分子，化学元素一样，构成了物质世界，而向量则在虚拟世界里描述这个世界 基于这两个重要的底层知识，模型的发展，飞起来了。\n菩提本无树，明镜亦非台，本来无一物，何处惹尘埃\nAI应用 大模型还毕竟只是一个最强大脑，一个超强CPU。我们知道通用计算机，不止CPU，还有一些外围设备才能通用工作，人类也是，不止大脑，还有眼睛，手，等外围设备。\n所以 AI 应用，或则 Agent 的概念，可以如此类比。\n技术工具 开源的技术工具很多，目前我在用 Langchain。但是不能局限于这些上层工具\n他是一把双刃剑 一把剑在高手手中，就是如虎添翼，在一个低手里，甚至可能会伤害到自己。\n截止目前，AI 工具依然如此。自身素质的提升，才能将这个工具发挥到巨大的价值，否则可能被带入的错误的方向。\n我在做什么 我在做 AI 应用， AI Agent。让大模型这个最强大脑扩展一些外围设备，让他更像人类一样，某种意义上来说也是一种AGI的探索。\n生活上，要考虑这些新的东西，能不能给自己带来切身收获，直白一点怎么变现，怎么让他提升自己的核心竞争力，在这承平已久，开始出现混乱的年代里，怎么用这个活下去。\n","permalink":"https://tomorrowthief.github.io/posts/ai-work-thought/","summary":"\u003cp\u003e近两年AI太火了，认真体验及分析后, 决定尽量跟上, 最少要把相关工具使用好。恰好工作中也在做相关工具，遂梳理之, 以加深对这块的理解。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e打败马车夫的不是汽车本身，而是会开车的司机\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"生成式ai的爆发\"\u003e生成式AI的爆发\u003c/h2\u003e\n\u003cp\u003eAI 这个领域很早就开始了，这个理念也很早就有了，比如早期图像处理，语音识别，阿尔法go等。可以回溯之前很多年。为何最近两年开始爆火了。我认为原因有几点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e技术突破\u003c/strong\u003e: 大模型的底层基于神经网络的深度学习推出了 transformer 架构。改变了大模型深度学习的格局带来了质的飞跃\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e基础设施发展\u003c/strong\u003e: 一个模型巨量的计算，消耗大量资源。硬件基础设施的发展能降低训练成本，试错成本，让更多想法去实现\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e数据的积累\u003c/strong\u003e: 互联网发展至今产生了大量数据，可以作为训练知识来让模型学习，这些都是人类发展产生的财富。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"简单说下-transformer\"\u003e简单说下 Transformer\u003c/h3\u003e\n\u003cp\u003e最早是在论文 \u003ccode\u003eAttention is all you need\u003c/code\u003e 提出注意力的机，以解决在序列生成中，长序列情况下的精度，简单一点来说是通过空间位置编码，扩充之前神经网络里的一些信息，使得即使再有更多长度，也不会让精度下降。\u003c/p\u003e\n\u003cp\u003e现代架构里添加了很多其他模块：比如多头自注意力机制，并行机制等。\u003c/p\u003e\n\u003cp\u003e总之结果是：推理精读更好，训练效率更高。这是当今 AIGC 爆发的技术基础\u003c/p\u003e\n\u003ch2 id=\"能改变什么\"\u003e能改变什么\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e有人说任何行业都可以重新再做一遍\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e人类的进步，从来离不开工具，有了轮子就有了车，马车，有了蒸汽机就有了汽车，这些都是革命性的改进，都是依赖工具的。工具改变了生产力，进一步质变为影响生产关系。促进了社会整体变化。\u003c/p\u003e\n\u003cp\u003e总结下来当前影响最大的几个面：\u003c/p\u003e\n\u003ch3 id=\"广告自媒体行业的商业模式\"\u003e广告/自媒体行业的商业模式\u003c/h3\u003e\n\u003cp\u003e剪辑，修图，这种体力活完全可以用AI帮忙做了\u003c/p\u003e\n\u003ch3 id=\"教育教培学习方式\"\u003e教育教培，学习方式\u003c/h3\u003e\n\u003cp\u003e对于家长可以用 AI 辅助教养小孩子，学生也可以方便的用AI自助学习。\u003c/p\u003e\n\u003ch3 id=\"工作效率提升\"\u003e工作效率提升\u003c/h3\u003e\n\u003cp\u003e有些细节直接用AI生成即可，员工负责更高一层的控制\u003c/p\u003e\n\u003ch3 id=\"软件开发程序员\"\u003e软件开发程序员\u003c/h3\u003e\n\u003cp\u003e我本身就在程序员行当里，对这个提效深有体会\u003c/p\u003e\n\u003ch2 id=\"局限性\"\u003e局限性\u003c/h2\u003e\n\u003cp\u003e正如人类能想象到的东西都是现有认知范围内现有知识体系内的东西一样，AI 学习能力目前还处于理解现有知识体系的状态。无法突破知识界限，只有在有限的知识范围内做一个最强大脑。\n所以局限性在于，他只是一个只能基于现有知识的超强大脑，无法升维无法突破边界。\n当然如果有了一个这样超强大脑，本身就是一件很厉害的事情。至于突破编辑，升维知识，这个还要考我们人类，然后再喂给AI，形成一个循环。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e一旦AI具备 公理，定律等级别的创新，是非常恐怖的，人类的一切迷惑将不再是迷惑，我是谁？来自哪里？要去哪里？上帝是谁，造物主是谁，各方神灵，神明又是谁？宇宙之外在哪里？生命是什么？为什么活着，为啥又要死去\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"模型\"\u003e模型\u003c/h2\u003e\n\u003cp\u003e百花齐放，百家争鸣。通用，垂类，领域模型等太多了，发展过于迅速，具体模型此处不多谈。\u003c/p\u003e\n\u003cp\u003e要谈的是：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e深度学习模式的变革，基于 Transformer 架构的深度学习促进了当下模型厂商的发展，多层 Transformer 架构使得大模型更像人类大脑。\u003c/li\u003e\n\u003cli\u003e向量化，万事万物皆是向量，皆是数据，向量这个结构让事物之间的关系拉平了。就像分子，化学元素一样，构成了物质世界，而向量则在虚拟世界里描述这个世界\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e基于这两个重要的底层知识，模型的发展，飞起来了。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e菩提本无树，明镜亦非台，本来无一物，何处惹尘埃\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"ai应用\"\u003eAI应用\u003c/h2\u003e\n\u003cp\u003e大模型还毕竟只是一个最强大脑，一个超强CPU。我们知道通用计算机，不止CPU，还有一些外围设备才能通用工作，人类也是，不止大脑，还有眼睛，手，等外围设备。\u003c/p\u003e\n\u003cp\u003e所以 AI 应用，或则 Agent 的概念，可以如此类比。\u003c/p\u003e","title":"AI应用实践的思考"},{"content":"此为一种劝诫训子的书，主要方向是如何处事，也可以是一本养心之书。从中国传统价值观及儒释道的哲学体系来讲述如何处事。总体分为四部分。\n作者是明万历期，69岁时所著。推荐此书的名人：曾国藩，据说其号 涤生 就是因为此书而来；稻盛和夫等。\n阅读建议：作为枕边书，或者心静的时候细读。\n分篇章总结 立命之学 此为开篇，作者以自己早起人生经历，讲述处事流程中第一个阶段：立命。非常重要的人生阶段，大概人与人的差距也会在此拉开。\n我命由我不由天 本篇最重要的概念了算是。具体一点就是命运是自己把握的。这一点估计现代人看到后会有很多反对点：起跑线不一样，人生结局可大大不同了。\n我的理解是：天生给到的东西已成定行，无法改变。但是之后的情形，还需通过自身不断学习，不断发展来改变。我们尽量做好能做的，其他的只能坦然接受。\n弃医从文 改变医生的方向，发展仕途的方向。中国历来都是学而优则仕，其他都是歧途。当下路子多了起来，但是遇到环境恶略的时候，发现还得是公务员稳啊。\n持续学习 文中讲到：顺利时也不要忘记努力发展，说不定啥时候不顺就来了。跟当下持续学习的概念不谋而合。随时准备拥抱变化，唯有持续学习，持续适应才能得心应手。\n不念过往 从前种种譬如昨日死，往后种种譬如今日生。\n改过之法 内心，真心，是前提。我觉得这一篇是重要紧急四象限的第二象限里的东西，很重要，也很容易忽略而没做好，应该是我们每天首要考虑的东西\n先有耻辱感 是否曲直，做一个有原则的人\n发自内心的行动 是否是真的在做，还是在模仿，还是在做一个样子。改过之行，来不得半点虚伪。\n积善之方 这一篇里讲述了要行善，行什么善，从十种角度来分析 善，区别什么是善，如何下后。此篇结构简单，但是内容较多，可以选择行阅读\n但行好事莫问前程 这一篇是很佛教里的思想了，善有善报恶有恶报。我不敢苟同这个观点，现实遇到太多事情违背这个理论了。\n但是我觉得行善还是有必要做的。并不是为了有善报，也不会因为你行了善就会有善报。最起码不要去做恶吧，能有一份心安理得不就够了么？\n不平等的地方太多了 社会上不平等的地方很多。若你可能是占便宜的一方，你会怎么想，而你是吃亏的一方，你又怎么想？\n做事情不可太功利 太过于功利，可能会变形。读一本书就想获得人生智慧，学一个技能就想发财致富，别想了。\n谦德之效 为人要低调的方式。不要轻易显山露水，少说话多干事。勿要恃才傲物，做事抱有空杯心态，虚怀若谷。\n总结 这本书，于我作为一本修心的书去阅读。对于有些人会问值不值得读，我觉得非常值得。但书和道理是死的。看你怎么理解消化了。\n从前种种, 譬如昨日死; 以后种种, 譬如今日生.\n","permalink":"https://tomorrowthief.github.io/posts/liaofansixun/","summary":"\u003cp\u003e此为一种劝诫训子的书，主要方向是如何处事，也可以是一本养心之书。从中国传统价值观及儒释道的哲学体系来讲述如何处事。总体分为四部分。\u003c/p\u003e\n\u003cp\u003e作者是明万历期，69岁时所著。推荐此书的名人：曾国藩，据说其号 \u003ccode\u003e涤生\u003c/code\u003e 就是因为此书而来；稻盛和夫等。\u003c/p\u003e\n\u003cp\u003e阅读建议：作为枕边书，或者心静的时候细读。\u003c/p\u003e\n\u003ch2 id=\"分篇章总结\"\u003e分篇章总结\u003c/h2\u003e\n\u003ch3 id=\"立命之学\"\u003e立命之学\u003c/h3\u003e\n\u003cp\u003e此为开篇，作者以自己早起人生经历，讲述处事流程中第一个阶段：立命。非常重要的人生阶段，大概人与人的差距也会在此拉开。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e我命由我不由天\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e本篇最重要的概念了算是。具体一点就是命运是自己把握的。这一点估计现代人看到后会有很多反对点：起跑线不一样，人生结局可大大不同了。\u003c/p\u003e\n\u003cp\u003e我的理解是：天生给到的东西已成定行，无法改变。但是之后的情形，还需通过自身不断学习，不断发展来改变。我们尽量做好能做的，其他的只能坦然接受。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e弃医从文\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e改变医生的方向，发展仕途的方向。中国历来都是学而优则仕，其他都是歧途。当下路子多了起来，但是遇到环境恶略的时候，发现还得是公务员稳啊。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e持续学习\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e文中讲到：顺利时也不要忘记努力发展，说不定啥时候不顺就来了。跟当下持续学习的概念不谋而合。随时准备拥抱变化，唯有持续学习，持续适应才能得心应手。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e不念过往\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e从前种种譬如昨日死，往后种种譬如今日生。\u003c/p\u003e\n\u003ch3 id=\"改过之法\"\u003e改过之法\u003c/h3\u003e\n\u003cp\u003e内心，真心，是前提。我觉得这一篇是重要紧急四象限的第二象限里的东西，很重要，也很容易忽略而没做好，应该是我们每天首要考虑的东西\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e先有耻辱感\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e是否曲直，做一个有原则的人\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e发自内心的行动\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e是否是真的在做，还是在模仿，还是在做一个样子。改过之行，来不得半点虚伪。\u003c/p\u003e\n\u003ch3 id=\"积善之方\"\u003e积善之方\u003c/h3\u003e\n\u003cp\u003e这一篇里讲述了要行善，行什么善，从十种角度来分析 善，区别什么是善，如何下后。此篇结构简单，但是内容较多，可以选择行阅读\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e但行好事莫问前程\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这一篇是很佛教里的思想了，善有善报恶有恶报。我不敢苟同这个观点，现实遇到太多事情违背这个理论了。\u003c/p\u003e\n\u003cp\u003e但是我觉得行善还是有必要做的。并不是为了有善报，也不会因为你行了善就会有善报。最起码不要去做恶吧，能有一份心安理得不就够了么？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e不平等的地方太多了\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e社会上不平等的地方很多。若你可能是占便宜的一方，你会怎么想，而你是吃亏的一方，你又怎么想？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e做事情不可太功利\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e太过于功利，可能会变形。读一本书就想获得人生智慧，学一个技能就想发财致富，别想了。\u003c/p\u003e\n\u003ch3 id=\"谦德之效\"\u003e谦德之效\u003c/h3\u003e\n\u003cp\u003e为人要低调的方式。不要轻易显山露水，少说话多干事。勿要恃才傲物，做事抱有空杯心态，虚怀若谷。\u003c/p\u003e\n\u003ch2 id=\"总结\"\u003e总结\u003c/h2\u003e\n\u003cp\u003e这本书，于我作为一本修心的书去阅读。对于有些人会问值不值得读，我觉得非常值得。但书和道理是死的。看你怎么理解消化了。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e从前种种, 譬如昨日死; 以后种种, 譬如今日生.\u003c/p\u003e\u003c/blockquote\u003e","title":"了凡四训"},{"content":" 六国破灭非并不利战不善，弊在赂秦……\n近日偶然重新看了这篇文章。再细读后，才发现其文风犀利，逻辑清晰，论点简明有力。虽作为高中时期的教材，那会儿跟不懂内容只知道背诵那些文字，再读后有种相见恨晚的感觉。\n全文读下来感觉朗朗上口，思路清晰，逻辑感也很强。是一篇非常好的议论文。\n一些文段 今日割五城，明日割十城，然后换得一夕安寝。起视四境，而秦兵又至。\n用物质消灭贪婪是不可能的，犹抱薪救火，薪不尽火不灭。讲的是人的贪婪欲望是无限的，一味的去迎合这些，那就会陷入无底洞。\n以赂秦之地封天下之谋臣，以事秦之心礼天下奇才，并力向西。则吾恐秦人食之不得下咽也\n这里想到了一个公司内耗严重的时候，将这些内耗的精力拿到做应该做的事情，才是公司团队应该的做法。\n个体利益与群体利益 上面那个道理我想很多人都会懂，但是为什么现实中还是会陷入内耗中。我觉得是一些人性本质问题: 为什么要你过的比我好，我玩不了，大家也都别想玩，所谓不患寡而患不均。另外就是在总的资源有限人又很多的时候，每个人都为了生存不得选择了个体利益优先的决定。\n这种能做到全局最佳解的方式，目前只发现了蚂蚁，蜜蜂这些动物群体做好。一方面因为这些动物单个个体是没有思想的，生来机械的负责一些事情。而人类是有思想的有感情的，在这些生存决策前往往会选择只符合单一个体利益的情况。\n六国论里这个观点在理性上是全局最合理的，但是考虑到现实中人的本性问题，每个国家都有各自的想法，思想。最终的决策往往是不合乎理性的。\n所以我觉得六国破灭的另一个深层次的因素是人性本质问题，而要解决这个问题需要合。要有个唯一负责人来调度各国，形成统一战力\n公司里的六国 公司内部各个部门众多，单个部门想推动全局做好一件事情是比较困难的，这里最好通过一个总指挥的制度去推进事情。然而事实中关系错中复杂，身处此中的你我大多选择苟活，如此跟六国中的赂秦战术并无大的区别\n","permalink":"https://tomorrowthief.github.io/posts/liuguolun/","summary":"\u003cblockquote\u003e\n\u003cp\u003e六国破灭非并不利战不善，弊在赂秦……\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e近日偶然重新看了这篇文章。再细读后，才发现其文风犀利，逻辑清晰，论点简明有力。虽作为高中时期的教材，那会儿跟不懂内容只知道背诵那些文字，再读后有种相见恨晚的感觉。\u003c/p\u003e\n\u003cp\u003e全文读下来感觉朗朗上口，思路清晰，逻辑感也很强。是一篇非常好的议论文。\u003c/p\u003e\n\u003ch2 id=\"一些文段\"\u003e一些文段\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e今日割五城，明日割十城，然后换得一夕安寝。起视四境，而秦兵又至。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e用物质消灭贪婪是不可能的，犹抱薪救火，薪不尽火不灭。讲的是人的贪婪欲望是无限的，一味的去迎合这些，那就会陷入无底洞。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e以赂秦之地封天下之谋臣，以事秦之心礼天下奇才，并力向西。则吾恐秦人食之不得下咽也\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e这里想到了一个公司内耗严重的时候，将这些内耗的精力拿到做应该做的事情，才是公司团队应该的做法。\u003c/p\u003e\n\u003ch2 id=\"个体利益与群体利益\"\u003e个体利益与群体利益\u003c/h2\u003e\n\u003cp\u003e上面那个道理我想很多人都会懂，但是为什么现实中还是会陷入内耗中。我觉得是一些人性本质问题: 为什么要你过的比我好，我玩不了，大家也都别想玩，所谓\u003ccode\u003e不患寡而患不均\u003c/code\u003e。另外就是在总的资源有限人又很多的时候，每个人都为了生存不得选择了个体利益优先的决定。\u003c/p\u003e\n\u003cp\u003e这种能做到全局最佳解的方式，目前只发现了蚂蚁，蜜蜂这些动物群体做好。一方面因为这些动物单个个体是没有思想的，生来机械的负责一些事情。而人类是有思想的有感情的，在这些生存决策前往往会选择只符合单一个体利益的情况。\u003c/p\u003e\n\u003cp\u003e六国论里这个观点在理性上是全局最合理的，但是考虑到现实中人的本性问题，每个国家都有各自的想法，思想。最终的决策往往是不合乎理性的。\u003c/p\u003e\n\u003cp\u003e所以我觉得六国破灭的另一个深层次的因素是人性本质问题，而要解决这个问题需要\u003ccode\u003e合\u003c/code\u003e。要有个唯一负责人来调度各国，形成统一战力\u003c/p\u003e\n\u003ch2 id=\"公司里的六国\"\u003e公司里的六国\u003c/h2\u003e\n\u003cp\u003e公司内部各个部门众多，单个部门想推动全局做好一件事情是比较困难的，这里最好通过一个总指挥的制度去推进事情。然而事实中关系错中复杂，身处此中的你我大多选择苟活，如此跟六国中的赂秦战术并无大的区别\u003c/p\u003e","title":"再读六国论"},{"content":"前言 近日工作不忙，偶然看到孙子兵法一书，印象里面应是各种打打杀杀，由无他事就读了一些，发现并不是那么简单。 博主在上下班路上，前后半个月的时间学习了一些。为了加深自己的记忆，理解。就梳理了这篇札记\n孙子兵法 是什么 孙子兵法是一本信息熵极高的阐述战争方法论的书，原文仅 6000 余字。经过之后两千多年时间沉淀：注解引申，国内外各大名家的参与，现在已经形成了一个战争理论生态，战争方法论。这里说的战争可以是冷兵器时代的战争，也可以是强调技术装备，信息化的现在战争，也可以是商战，工作职场，学业，投资。现在已经翻译了多国语言，据说在国外也比较流行，认可度极高。\n适读人群: 最好是有一定工作生活经验的人，如果是单纯的学生不建议阅读\n架构图 注此图引自知乎\n首先-不去战争 孙子兵法首要强调的是不战而胜，因为战争成本太高代价太大。特等医生的价值不是体现在治病救人，而是在生病前防疫工作：如何不得病，如何尽早发现病并及时治理。当然这里不是贬低治病救人的技术，只是我们经常忽略准备防疫的重要性，到了生病时候才发现代价真的太大。所以孙子兵法虽然是一本兵书，却比较强调怎么不去战争，规避战争，强调的是：日积月累，有备无患\n作战原则 实际中战斗是不可避免的。如何做好呢？战斗就像做事做人。孙子兵法全文里强调三大原则：知己知彼, 先胜后站, 至人而不至于人。很多具体章节里都是为了满足遵循这几个原则的，所以理解透了这些原则思想，一切满足此的都可以称为好兵法。\n就像软件架构里的设计模式 solid 原则，很多具体的模式都是为了满足实现solid原则。这些原则是贯穿整体的\n工作中需要做参考别的技术，大多是学习了别人的思想，别人的原则，然后根据自己的情况实现一套可行的方案。\n基本面 战前准备的方法论：五事七计(具体看上面架构图)。运筹帷幄，庙堂之上充分分析各个因素，最后制定出最有利的战斗计划。\n如同我们在做编码设计，或则项目时，基本都是先尽可能做好详设计，而这些又是比较耗费精力的。最后写代码具体工作却是很快的。倘若设计阶段没做好，后面很可能比较被动，代码自量也难以保证，返工之类的。\n操作面 有了五十七计，胜负因素方向已定。而战场却又千变万化，影响因素也不计其数。就要因地制宜的去发挥。孙子兵法里提出有行军，九地九变等，都是讲一些具体情况下的做法。\n这里我理解我们工作尤其是互联网这种变化较多工作，必须要做好抬头看路的工作。把握政策情况，市场情况，个人成长情况然后做好自己的规划。\n个人收获 收获还是挺多：明确了做事的 原则，系统分析法所谓方法论，底层逻辑。以及该做哪些事情，不该做哪些事情的取舍\n不要忽略基本面 善战者,无智名,无勇功。\n人们往往比较喜欢波澜壮阔的故事，而忽略基本面的作用。比如我们喜欢韩信背水一战的故事，但是从理论来上看是违背 五事七计 的分析。诸葛亮出师北伐的例子也是在基本面上就输了，汉武大帝的传奇一生，却耗费了文景之治的积累，所谓一将功成万骨枯。\n古今中外精彩故事也不少，但那是2000多年的历史积累，更多的是默默无闻却又贡献很多的平淡故事\n我们每个人也一样，绝大多数都是平凡平淡的。但是能把基础面做好，有一份好的学业，经营一份自己的工作事业，有个好的身体健康素质，已经能达到生活的意义\n准备的重要性 这里说的准备更多是: 五事七计。\n做管理: 考虑编制是如何的，组织架构怎样设计 带团队: 考虑梯队模型时分析成员画像，如五事里的将的能力模型定义：智信仁严勇 做项目: 考虑项目以来的技术，团队，项目本身的ROI等 知己知彼 难在知己 自己能决定失败，对手才能决定能否胜利。\n在势均力敌的时候，对手不犯错一般自己很难胜利。所以说胜利是看对手有没有犯错。对应的，自己的一些准备日常是决定自己能不能失败的。而真的知道自己的实力么，掌握好自己的优缺，了解自己所想要的不？是很关键的也容易被环境带偏\n做决策，客观了么？ 心里学上 人们选择一个事情，不是这个事情真实客观，而是人们期望他是对的，想要他是对的。\n最后生活并没有银弹，养兵千日用兵一时。基本面做的好了，操作面做的再差胜算也大；基本面做的普通，也不要放弃，操作面上还有很多空间。\n尽信书不如无书，理论很多，观点很多，说法很多，怎么去选择，怎么去用呢？\n","permalink":"https://tomorrowthief.github.io/posts/art-of-war/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e近日工作不忙，偶然看到孙子兵法一书，印象里面应是各种打打杀杀，由无他事就读了一些，发现并不是那么简单。\n博主在上下班路上，前后半个月的时间学习了一些。为了加深自己的记忆，理解。就梳理了这篇札记\u003c/p\u003e\n\u003ch2 id=\"孙子兵法-是什么\"\u003e孙子兵法 是什么\u003c/h2\u003e\n\u003cp\u003e孙子兵法是一本信息熵极高的阐述战争方法论的书，原文仅 6000 余字。经过之后两千多年时间沉淀：注解引申，国内外各大名家的参与，现在已经形成了一个\u003ccode\u003e战争理论生态\u003c/code\u003e，\u003ccode\u003e战争方法论\u003c/code\u003e。这里说的战争可以是冷兵器时代的战争，也可以是强调技术装备，信息化的\u003ccode\u003e现在战争\u003c/code\u003e，也可以是\u003ccode\u003e商战\u003c/code\u003e，\u003ccode\u003e工作职场\u003c/code\u003e，\u003ccode\u003e学业\u003c/code\u003e，\u003ccode\u003e投资\u003c/code\u003e。现在已经翻译了多国语言，据说在国外也比较流行，认可度极高。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e适读人群: 最好是有一定工作生活经验的人，如果是单纯的学生不建议阅读\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"架构图\"\u003e架构图\u003c/h2\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://pic1.zhimg.com/80/31b844f5d5119c1d9abfb8dd91cb31c6_1440w.jpg?source=1940ef5c\" alt=\"架构图\"  /\u003e\n\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e注此图引自知乎\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch3 id=\"首先-不去战争\"\u003e首先-不去战争\u003c/h3\u003e\n\u003cp\u003e孙子兵法首要强调的是\u003ccode\u003e不战而胜\u003c/code\u003e，因为战争成本太高代价太大。特等医生的价值不是体现在治病救人，而是在生病前防疫工作：如何不得病，如何尽早发现病并及时治理。当然这里不是贬低治病救人的技术，只是我们经常忽略准备防疫的重要性，到了生病时候才发现代价真的太大。所以孙子兵法虽然是一本兵书，却比较强调怎么不去战争，规避战争，强调的是：\u003ccode\u003e日积月累\u003c/code\u003e，\u003ccode\u003e有备无患\u003c/code\u003e\u003c/p\u003e\n\u003ch3 id=\"作战原则\"\u003e作战原则\u003c/h3\u003e\n\u003cp\u003e实际中战斗是不可避免的。如何做好呢？战斗就像做事做人。孙子兵法全文里强调三大原则：\u003ccode\u003e知己知彼\u003c/code\u003e, \u003ccode\u003e先胜后站\u003c/code\u003e, \u003ccode\u003e至人而不至于人\u003c/code\u003e。很多具体章节里都是为了满足遵循这几个原则的，所以理解透了这些原则思想，一切满足此的都可以称为好兵法。\u003c/p\u003e\n\u003cp\u003e就像软件架构里的设计模式 \u003ccode\u003esolid\u003c/code\u003e 原则，很多具体的模式都是为了满足实现\u003ccode\u003esolid\u003c/code\u003e原则。这些原则是贯穿整体的\u003c/p\u003e\n\u003cp\u003e工作中需要做参考别的技术，大多是学习了别人的思想，别人的原则，然后根据自己的情况实现一套可行的方案。\u003c/p\u003e\n\u003ch3 id=\"基本面\"\u003e基本面\u003c/h3\u003e\n\u003cp\u003e战前准备的方法论：五事七计(具体看上面架构图)。运筹帷幄，庙堂之上充分分析各个因素，最后制定出最有利的战斗计划。\u003c/p\u003e\n\u003cp\u003e如同我们在做编码设计，或则项目时，基本都是先尽可能做好详设计，而这些又是比较耗费精力的。最后写代码具体工作却是很快的。倘若设计阶段没做好，后面很可能比较被动，代码自量也难以保证，返工之类的。\u003c/p\u003e\n\u003ch3 id=\"操作面\"\u003e操作面\u003c/h3\u003e\n\u003cp\u003e有了五十七计，胜负因素方向已定。而战场却又千变万化，影响因素也不计其数。就要因地制宜的去发挥。孙子兵法里提出有行军，九地九变等，都是讲一些具体情况下的做法。\u003c/p\u003e\n\u003cp\u003e这里我理解我们工作尤其是互联网这种变化较多工作，必须要做好抬头看路的工作。把握政策情况，市场情况，个人成长情况然后做好自己的规划。\u003c/p\u003e\n\u003ch2 id=\"个人收获\"\u003e个人收获\u003c/h2\u003e\n\u003cp\u003e收获还是挺多：明确了做事的 原则，系统分析法所谓方法论，底层逻辑。以及该做哪些事情，不该做哪些事情的取舍\u003c/p\u003e\n\u003ch3 id=\"不要忽略基本面\"\u003e不要忽略基本面\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ccode\u003e善战者,无智名,无勇功\u003c/code\u003e。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e人们往往比较喜欢波澜壮阔的故事，而忽略基本面的作用。比如我们喜欢韩信背水一战的故事，但是从理论来上看是违背 \u003ccode\u003e五事七计\u003c/code\u003e 的分析。诸葛亮出师北伐的例子也是在基本面上就输了，汉武大帝的传奇一生，却耗费了文景之治的积累，所谓一将功成万骨枯。\u003c/p\u003e\n\u003cp\u003e古今中外精彩故事也不少，但那是2000多年的历史积累，更多的是默默无闻却又贡献很多的平淡故事\u003c/p\u003e\n\u003cp\u003e我们每个人也一样，绝大多数都是平凡平淡的。但是能把基础面做好，有一份好的学业，经营一份自己的工作事业，有个好的身体健康素质，已经能达到生活的意义\u003c/p\u003e\n\u003ch3 id=\"准备的重要性\"\u003e准备的重要性\u003c/h3\u003e\n\u003cp\u003e这里说的准备更多是: \u003ccode\u003e五事七计\u003c/code\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e做管理: 考虑编制是如何的，组织架构怎样设计\u003c/li\u003e\n\u003cli\u003e带团队: 考虑梯队模型时分析成员画像，如五事里的\u003ccode\u003e将\u003c/code\u003e的能力模型定义：\u003ccode\u003e智信仁严勇\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e做项目: 考虑项目以来的技术，团队，项目本身的ROI等\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"知己知彼-难在知己\"\u003e知己知彼 难在知己\u003c/h3\u003e\n\u003cp\u003e自己能决定失败，对手才能决定能否胜利。\u003c/p\u003e\n\u003cp\u003e在势均力敌的时候，对手不犯错一般自己很难胜利。所以说胜利是看对手有没有犯错。对应的，自己的一些准备日常是决定自己能不能失败的。而真的知道自己的实力么，掌握好自己的优缺，了解自己所想要的不？是很关键的也容易被环境带偏\u003c/p\u003e\n\u003ch3 id=\"做决策客观了么\"\u003e做决策，客观了么？\u003c/h3\u003e\n\u003cp\u003e心里学上 人们选择一个事情，不是这个事情真实客观，而是人们期望他是对的，想要他是对的。\u003c/p\u003e\n\u003cp\u003e最后生活并没有银弹，养兵千日用兵一时。基本面做的好了，操作面做的再差胜算也大；基本面做的普通，也不要放弃，操作面上还有很多空间。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e尽信书不如无书，理论很多，观点很多，说法很多，怎么去选择，怎么去用呢？\u003c/p\u003e\u003c/blockquote\u003e","title":"孙子兵法-研习记"},{"content":"前言 之前在公司内部做过「扩展性设计」的分享。后面重新整理形成博客形式记录自己的学习。\n由于作者长期从事Web前端领域的工作的原因，本文也是基于这些技术领域发出的一些关于应用软件方向上的扩展性总结\n什么是扩展性设计 软件架构设计里比较关注的几个要素：扩展性，稳定性，可维护性。很多领域里都会有这方面的考虑。比如：业务架构，产品架构，软件技术架构。那么具体怎么定义呢\nExtensibility is a software engineering and systems design principle where the implementation takes future growth into consideration\n扩展性是在考虑未来增长发展时所做的一些工程实践和系统设计原则\n引用自维基百科的定义\n基础理论 这里讨论的理论基础是比较原始的，类似于数学或物理中的定律定理。实践中是要结合具体场景通过组合这里理论，以及基于这些理论做些推导来形成最佳的设计\n找到变化的东西 solid原则 分层明确 常用形式 中间件 中间件是一种实践比较成熟的形式了。基本的思想是根据一些约定拦截输入，做一些逻辑，或者修改挂载上下文，然后继续向下流。具体的形式上有\n洋葱模型中间件： koa2， redux 管道化模型的中间件：pipe 中间件实践中要考虑的因素是：\n中间件收集方式 中间件之间的关系，顺序等 插件 这种形式也比较常见。类似于微内核 + plugin/addon 模型。市面上也存在了很多基于此架构的工具或框架。此模式实践中要考虑的因素是：\n隔离性：暴露主应用的那些能力，防止插件的运行影响主应用逻辑 性能：进程模型设计，是否独立进程运行 生命周期：插件加载时机，插件执行时机 插件之间管理：插件之间是否能互相调用，互相影响 插件机制思想很简单，重要的是各种实现细节，实践中有不同形式与细节。这里日后单独写一篇文章来分析\n配置 读取配置文件，读取参数都是这种形式。是一种简单但实用的形式。不过多讨论\n案例分析 webpack中的扩展性设计 webpack 是一个比较流行的打包工具。其功能的强大，生态的繁荣离不他的插件体系和loader体系。本身作为一个流程控制中心，很多功能都是分散在各个插件里来做的\nloader体系 针对特定的文件类型来做处理的，有点类似上一节提到的管道化中间件模型。针对特定类型文件可以提供多个，按照顺序管道化的处理转换。\n插件体系 webpack 内部主要的两个概念是 complier主要负责构建整体流程等，compliton主要负责构建里的具体编译工作。这两者都是通过 Tapable 库来完成内部生命周期暴露，Tapable 大体上是一种 sub-pub 模式的实现, 其核心概念 hook 可以与 event系统里的某个 event 等价。在同一个hook下可以绑定很多handler的注册，有点像AOP编程思想。\n一个插件的demo\nfunction HelloWorldPlugin(options) { // 使用 options 设置插件实例…… } HelloWorldPlugin.prototype.apply = function(compiler) { compiler.plugin(\u0026#39;done\u0026#39;, function() { console.log(\u0026#39;Hello World!\u0026#39;); }); }; module.exports = HelloWorldPlugin; 解释: 插件是约定实现带有 apply 方法的类(demo中通过构造函数和原型的方式实现)。apply 方法是 webpack 内部使用的。webpack 暴露了 complier 对象给 apply，可以使用其暴露的生命周期钩子来处理所要逻辑，完整的钩子列表可以在官网上找\nbabel 副作用 对，最大的副作用就是过度设计，无论何种设计都不是免费的。完美的扩展机制是需要考虑很多因素的，上文有一些分析。倘若为了尚不明确的问题做复杂的设计，可能得不偿失。\n总结 扩展性很重要，同时也要警惕副作用。切不可为了设计而设计，实用有效，能为公司真正带来价值的才能成为好设计。当然如果职位就是探索研究型的，可以忽略一些副作用\n个人觉得做架构的最佳实践：充分理解问题的场景，规模，特有的属性等，未来的规划，结合基础理论来做具体设计。对未来的增长不明确时，不建议花费很大成本做这些设计。\n","permalink":"https://tomorrowthief.github.io/posts/extend-design/","summary":"\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\u003cp\u003e之前在公司内部做过「扩展性设计」的分享。后面重新整理形成博客形式记录自己的学习。\u003c/p\u003e\n\u003cp\u003e由于作者长期从事Web前端领域的工作的原因，本文也是基于这些技术领域发出的一些关于应用软件方向上的扩展性总结\u003c/p\u003e\n\u003ch2 id=\"什么是扩展性设计\"\u003e什么是扩展性设计\u003c/h2\u003e\n\u003cp\u003e软件架构设计里比较关注的几个要素：\u003ccode\u003e扩展性\u003c/code\u003e，\u003ccode\u003e稳定性\u003c/code\u003e，\u003ccode\u003e可维护性\u003c/code\u003e。很多领域里都会有这方面的考虑。比如：业务架构，产品架构，软件技术架构。那么具体怎么定义呢\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eExtensibility is a software engineering and systems design principle where the implementation takes future growth into consideration\u003c/p\u003e\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e扩展性是在考虑未来增长发展时所做的一些工程实践和系统设计原则\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e引用自维基百科的定义\u003c/p\u003e\n\u003ch2 id=\"基础理论\"\u003e基础理论\u003c/h2\u003e\n\u003cp\u003e这里讨论的理论基础是比较原始的，类似于数学或物理中的定律定理。实践中是要结合具体场景通过组合这里理论，以及基于这些理论做些推导来形成最佳的设计\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e找到变化的东西\u003c/li\u003e\n\u003cli\u003esolid原则\u003c/li\u003e\n\u003cli\u003e分层明确\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"常用形式\"\u003e常用形式\u003c/h2\u003e\n\u003ch3 id=\"中间件\"\u003e中间件\u003c/h3\u003e\n\u003cp\u003e中间件是一种实践比较成熟的形式了。基本的思想是根据一些约定拦截输入，做一些逻辑，或者修改挂载上下文，然后继续向下流。具体的形式上有\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e洋葱模型中间件： \u003ccode\u003ekoa2\u003c/code\u003e， \u003ccode\u003eredux\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e管道化模型的中间件：\u003ccode\u003epipe\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e中间件实践中要考虑的因素是：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e中间件收集方式\u003c/li\u003e\n\u003cli\u003e中间件之间的关系，顺序等\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"插件\"\u003e插件\u003c/h3\u003e\n\u003cp\u003e这种形式也比较常见。类似于\u003ccode\u003e微内核\u003c/code\u003e + \u003ccode\u003eplugin/addon\u003c/code\u003e 模型。市面上也存在了很多基于此架构的工具或框架。此模式实践中要考虑的因素是：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e隔离性：暴露主应用的那些能力，防止插件的运行影响主应用逻辑\u003c/li\u003e\n\u003cli\u003e性能：进程模型设计，是否独立进程运行\u003c/li\u003e\n\u003cli\u003e生命周期：插件加载时机，插件执行时机\u003c/li\u003e\n\u003cli\u003e插件之间管理：插件之间是否能互相调用，互相影响\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e插件机制思想很简单，重要的是各种实现细节，实践中有不同形式与细节。这里日后单独写一篇文章来分析\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch3 id=\"配置\"\u003e配置\u003c/h3\u003e\n\u003cp\u003e读取配置文件，读取参数都是这种形式。是一种简单但实用的形式。不过多讨论\u003c/p\u003e\n\u003ch2 id=\"案例分析\"\u003e案例分析\u003c/h2\u003e\n\u003ch3 id=\"webpack中的扩展性设计\"\u003ewebpack中的扩展性设计\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003ewebpack\u003c/code\u003e 是一个比较流行的打包工具。其功能的强大，生态的繁荣离不他的插件体系和loader体系。本身作为一个流程控制中心，很多功能都是分散在各个插件里来做的\u003c/p\u003e\n\u003ch4 id=\"loader体系\"\u003eloader体系\u003c/h4\u003e\n\u003cp\u003e针对特定的文件类型来做处理的，有点类似上一节提到的\u003ccode\u003e管道化中间件模型\u003c/code\u003e。针对特定类型文件可以提供多个，按照顺序管道化的处理转换。\u003c/p\u003e\n\u003ch4 id=\"插件体系\"\u003e插件体系\u003c/h4\u003e\n\u003cp\u003ewebpack 内部主要的两个概念是 \u003ccode\u003ecomplier\u003c/code\u003e主要负责构建整体流程等，\u003ccode\u003ecompliton\u003c/code\u003e主要负责构建里的具体编译工作。这两者都是通过 \u003ccode\u003eTapable\u003c/code\u003e 库来完成内部生命周期暴露，\u003ccode\u003eTapable\u003c/code\u003e 大体上是一种 \u003ccode\u003esub-pub\u003c/code\u003e 模式的实现, 其核心概念 hook 可以与 event系统里的某个 event 等价。在同一个hook下可以绑定很多handler的注册，有点像AOP编程思想。\u003c/p\u003e","title":"扩展性设计"},{"content":"深度思考的重要性就不多强调了，该如何做好呢？\n如何做好深度思考？\n多维度 我这里说的多维度可以理解为多视角。\n做一个技术分享，在听众的视角下如何的，主办方的视角如何，分享者的视角又如何，领导视角，同事视角如何……\n多层次 一个事物是处于整体系统里的那一层，与其他层的依赖关系。都是可以考虑的\n比如日常技术问题处理，问题本身是如何的，处理及反馈流程是如何的，技术依赖的其他系统大概如何的……\n现象与本质 有哲学基础的都会知道，事物的发展变化都会有表现与本质的区别。这一点有点像我们使用技术框架时，能掌握好框架的使用层以及底层原理，才能以正确的姿势使用。\n同样道理，思考问题的表现以及底层逻辑如何，才能做好深度思考。实际中可能会更加复杂：人的关系，系统的关系，技术本身的关系\n刻意练习 所谓学而不思则茫，有了理论基础，加上一些刻意练习，才能真正掌握。具体落地点:\n多总结 多复盘 多积累方法论 多接触不同系统的案例 ","permalink":"https://tomorrowthief.github.io/posts/deep-thinking/","summary":"\u003cp\u003e深度思考的重要性就不多强调了，该如何做好呢？\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e如何做好深度思考？\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"多维度\"\u003e多维度\u003c/h2\u003e\n\u003cp\u003e我这里说的多维度可以理解为\u003ccode\u003e多视角\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e做一个技术分享，在听众的视角下如何的，主办方的视角如何，分享者的视角又如何，领导视角，同事视角如何……\u003c/p\u003e\n\u003ch2 id=\"多层次\"\u003e多层次\u003c/h2\u003e\n\u003cp\u003e一个事物是处于整体系统里的那一层，与其他层的依赖关系。都是可以考虑的\u003c/p\u003e\n\u003cp\u003e比如日常技术问题处理，问题本身是如何的，处理及反馈流程是如何的，技术依赖的其他系统大概如何的……\u003c/p\u003e\n\u003ch2 id=\"现象与本质\"\u003e现象与本质\u003c/h2\u003e\n\u003cp\u003e有哲学基础的都会知道，事物的发展变化都会有表现与本质的区别。这一点有点像我们使用技术框架时，能掌握好框架的使用层以及底层原理，才能以正确的姿势使用。\u003c/p\u003e\n\u003cp\u003e同样道理，思考问题的表现以及底层逻辑如何，才能做好深度思考。实际中可能会更加复杂：人的关系，系统的关系，技术本身的关系\u003c/p\u003e\n\u003ch2 id=\"刻意练习\"\u003e刻意练习\u003c/h2\u003e\n\u003cp\u003e所谓学而不思则茫，有了理论基础，加上一些\u003ccode\u003e刻意练习\u003c/code\u003e，才能真正掌握。具体落地点:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e多总结\u003c/li\u003e\n\u003cli\u003e多复盘\u003c/li\u003e\n\u003cli\u003e多积累方法论\u003c/li\u003e\n\u003cli\u003e多接触不同系统的案例\u003c/li\u003e\n\u003c/ul\u003e","title":"深度思考"},{"content":"最近开始学习蛙泳，其实很早之前下水练习过几次，但是没有系统的整理。最近开始了系统性的练习：看了些视频讲解，纠正了些错误，总算有些小进步。\n过程中发现了自己之前很多动作，模式，思考是不对的。但是纠正这些不对的点花费了很久时间。学习效率比较低。而纠正错误的技巧以及思路是一个通用的学习理论，对于工作，生活应该都适用。所以做了此快速学习新技能技巧的总结，或者称之为方法论也好。\n学习速度 掌握好正确的路径，学习资料，其余的就是练习了。理论与实践相辅相承。在实践中遇到问题，可能是理论没有吃透，可以多补充。比如不知道动作该怎么连贯（划手蹬腿结合）的时候，可以补充下理论。理论充足不等于实践也厉害，因为都有个人，环境的因素。\n所以 理论和实践结合 互相补充 来提速\n基础比较关键 最重要的基础点是：\n划手 蹬腿 协调 切记欲速不达的道理： 我之前基础练习的不够好，蹬腿，划手导致在完整动作时漏洞百出，出了问题没有头绪，然后再回过头一点一点练习基础才能做好完整动作，这个过程就比较浪费时间了。 在看专业运动员每一个细节都特别好，大概就是基础比较扎实了吧。所以想要快速达到目标，不要忽视了基础。稳扎稳打可能是速度最快的方式\n好的老师 个人在实践中总是会有很多点会偏离最优，有些思想也会偏离。有的时候会卡在某个环节出不来，这个时候如果自己有良好的资料可以参考，最好了。 比如我在呼气练习的时候，水下一直是哈气的动作，水上就不能很好的吸气了，知道看到有个解说提醒说水下吐气，才知道，这个环节练习错了。这个哈气矫正为吐气的过程是看了讲解。但是假如有个好教师帮忙点一二，可以快速解围解困惑的。\n类似的工作中也比较强调有好的导师，好的领导的重要性，所谓读万卷书不如行万里路，不过阅人无数，不如良师指点。 所以如何发现好老师？正规的学习指南，学习资料是大家当前最合适的，有真人最好了。\n最后发现总结的都是些大道理，这些大道理大家应该都懂，但是怎么与实际结合并帮助实践是比较关键的。\n总结 本文通过个人蛙泳学习过程中遇到的问题做了些反思，总结了一些快速学习技能的通用技巧方法论。并强调这些大道理如何与实际结合的技巧才是关键。希望对做其他事情有帮助，也不枉这次辛苦练习了。最后学习的过程是没有银弹的，前进吧少年\n","permalink":"https://tomorrowthief.github.io/posts/swim/","summary":"\u003cp\u003e最近开始学习蛙泳，其实很早之前下水练习过几次，但是没有系统的整理。最近开始了系统性的练习：看了些视频讲解，纠正了些错误，总算有些小进步。\u003c/p\u003e\n\u003cp\u003e过程中发现了自己之前很多动作，模式，思考是不对的。但是纠正这些不对的点花费了很久时间。学习效率比较低。而纠正错误的技巧以及思路是一个通用的学习理论，对于工作，生活应该都适用。所以做了此快速学习新技能技巧的总结，或者称之为方法论也好。\u003c/p\u003e\n\u003ch2 id=\"学习速度\"\u003e学习速度\u003c/h2\u003e\n\u003cp\u003e掌握好正确的路径，学习资料，其余的就是练习了。理论与实践相辅相承。在实践中遇到问题，可能是理论没有吃透，可以多补充。比如不知道动作该怎么连贯（划手蹬腿结合）的时候，可以补充下理论。理论充足不等于实践也厉害，因为都有个人，环境的因素。\u003c/p\u003e\n\u003cp\u003e所以 \u003ccode\u003e理论和实践结合 互相补充\u003c/code\u003e 来提速\u003c/p\u003e\n\u003ch2 id=\"基础比较关键\"\u003e基础比较关键\u003c/h2\u003e\n\u003cp\u003e最重要的基础点是：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e划手\u003c/li\u003e\n\u003cli\u003e蹬腿\u003c/li\u003e\n\u003cli\u003e协调\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e切记欲速不达的道理： 我之前基础练习的不够好，蹬腿，划手导致在完整动作时漏洞百出，出了问题没有头绪，然后再回过头一点一点练习基础才能做好完整动作，这个过程就比较浪费时间了。\n在看专业运动员每一个细节都特别好，大概就是基础比较扎实了吧。所以想要快速达到目标，不要忽视了基础。\u003ccode\u003e稳扎稳打可能是速度最快的方式\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"好的老师\"\u003e好的老师\u003c/h2\u003e\n\u003cp\u003e个人在实践中总是会有很多点会偏离最优，有些思想也会偏离。有的时候会卡在某个环节出不来，这个时候如果自己有良好的资料可以参考，最好了。\n比如我在呼气练习的时候，水下一直是哈气的动作，水上就不能很好的吸气了，知道看到有个解说提醒说水下吐气，才知道，这个环节练习错了。这个哈气矫正为吐气的过程是看了讲解。但是假如有个好教师帮忙点一二，可以快速解围解困惑的。\u003c/p\u003e\n\u003cp\u003e类似的工作中也比较强调有好的导师，好的领导的重要性，所谓读万卷书不如行万里路，不过阅人无数，不如良师指点。\n所以如何发现好老师？正规的学习指南，学习资料是大家当前最合适的，有真人最好了。\u003c/p\u003e\n\u003cp\u003e最后发现总结的都是些大道理，这些大道理大家应该都懂，但是怎么与实际结合并帮助实践是比较关键的。\u003c/p\u003e\n\u003ch2 id=\"总结\"\u003e总结\u003c/h2\u003e\n\u003cp\u003e本文通过个人蛙泳学习过程中遇到的问题做了些反思，总结了一些快速学习技能的通用技巧方法论。并强调这些大道理如何与实际结合的技巧才是关键。希望对做其他事情有帮助，也不枉这次辛苦练习了。最后学习的过程是没有银弹的，前进吧少年\u003c/p\u003e","title":"蛙泳学思"},{"content":"背景 最近比较空闲，在写作东西的时候发现一个不错的主题。刚好自己除了一些公共账号外，还没自己的博客，遂搭建之。\n主题：基于Hugo，详细可以见网站底部。托管于 GitHub Pages。\n博客内容 主要是搬移之前写过的一些东西，同时做了一些格式化处理。未来新写的东西应该会首先发到这里了\n菩提本无树，明镜亦非台，本来无一物，何处惹尘埃\n","permalink":"https://tomorrowthief.github.io/posts/kaishila/","summary":"\u003ch1 id=\"背景\"\u003e背景\u003c/h1\u003e\n\u003cp\u003e最近比较空闲，在写作东西的时候发现一个不错的主题。刚好自己除了一些公共账号外，还没自己的博客，遂搭建之。\u003c/p\u003e\n\u003cp\u003e主题：基于Hugo，详细可以见网站底部。托管于 \u003ccode\u003eGitHub Pages\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"博客内容\"\u003e博客内容\u003c/h2\u003e\n\u003cp\u003e主要是搬移之前写过的一些东西，同时做了一些格式化处理。未来新写的东西应该会首先发到这里了\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e菩提本无树，明镜亦非台，本来无一物，何处惹尘埃\u003c/p\u003e\u003c/blockquote\u003e","title":"文章搬运开始啦"},{"content":"I am now a web developer, software developer, based in 杭州 / 郑州.\nSkills \u0026amp; Languages Front End，Nodejs, Python, Golang AI Application, LLM, Agentic Application Learning Something about Web3 Neurons Networks \u0026amp; Transformer ","permalink":"https://tomorrowthief.github.io/about/","summary":"about","title":"About"}]