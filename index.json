[{"content":"前言 近日工作不忙，翻开微信读书看到孙子兵法一书，凭印象里面应是各种大杀，由于无他事就读了一些，发现并不是那么简单。 博主在上下班路上，前后半个月的时间学习了一些。为了加深记忆，理解。就梳理了这篇札记\n孙子兵法讲什么 孙子兵法是一本信息熵极高的阐述战争方法论的书，原文仅 6000 余字。经过之后两千多年时间沉淀：注解引申，国内外各大名家的参与：曹操，杜牧等，现在已经形成了一个战争理论生态，战争方法论。这里说的战争可以是冷兵器时代的战争，也可以是强调技术装备，信息化的现在战争，也可以是商战，工作职场，学业，投资圈里战。现在已经翻译了多国语言，据说在国外也比较流行，认可度极高。\n适读人群: 有些工作经验，做事情经验的再读这些会有深刻体会，不然不知其所云。最佳的状态是有些资深的教师或者爸妈去读，然后把这些理论编导成实际的教育教导，来引导启发孩子学生\n架构图 注此图引自知乎\n不战而胜 孙子兵法首要强调的是不战而胜，因为战争成本太高代价太大。特等医生的价值不是体现在治病救人，而是在生病前防疫工作：如何不得病，如何尽早发现病并及时治理。当然这里不是贬低治病救人的技术，只是我们经常忽略准备防疫的重要性，到了生病时候才发现代价真的太大。所以孙子兵法虽然是一本兵书，却比较强调怎么不去战争，规避战争，强调的是：日积月累，有备无患\n作战原则 实际中战斗是不可避免的。如何做好呢？战斗就像做事做人。孙子兵法全文里强调三大原则：知己知彼, 先胜后站, 至人而不至于人。很多具体章节里都是为了满足遵循这几个原则的。就像软件架构里的设计模式 solid 原则，很多具体的模式都是为了满足实现solid原则。这些原则是贯穿整体的\n基本面 战前准备的方法论：五事七计(具体看上面架构图)。\n操作面 个人收获 善战者,无智名,无勇功。\n日常中很多事情都如战争，在不同事情里又扮演者不同角色：君，将，帅，兵，民，等。其实大多人都是在平凡中度过一生的。把握好基本面，善用操作面\n尽信书不如无书\n","permalink":"https://tomorrowthief.github.io/posts/art-of-war/","summary":"前言 近日工作不忙，翻开微信读书看到孙子兵法一书，凭印象里面应是各种大杀，由于无他事就读了一些，发现并不是那么简单。 博主在上下班路上，前后半个月的时间学习了一些。为了加深记忆，理解。就梳理了这篇札记\n孙子兵法讲什么 孙子兵法是一本信息熵极高的阐述战争方法论的书，原文仅 6000 余字。经过之后两千多年时间沉淀：注解引申，国内外各大名家的参与：曹操，杜牧等，现在已经形成了一个战争理论生态，战争方法论。这里说的战争可以是冷兵器时代的战争，也可以是强调技术装备，信息化的现在战争，也可以是商战，工作职场，学业，投资圈里战。现在已经翻译了多国语言，据说在国外也比较流行，认可度极高。\n适读人群: 有些工作经验，做事情经验的再读这些会有深刻体会，不然不知其所云。最佳的状态是有些资深的教师或者爸妈去读，然后把这些理论编导成实际的教育教导，来引导启发孩子学生\n架构图 注此图引自知乎\n不战而胜 孙子兵法首要强调的是不战而胜，因为战争成本太高代价太大。特等医生的价值不是体现在治病救人，而是在生病前防疫工作：如何不得病，如何尽早发现病并及时治理。当然这里不是贬低治病救人的技术，只是我们经常忽略准备防疫的重要性，到了生病时候才发现代价真的太大。所以孙子兵法虽然是一本兵书，却比较强调怎么不去战争，规避战争，强调的是：日积月累，有备无患\n作战原则 实际中战斗是不可避免的。如何做好呢？战斗就像做事做人。孙子兵法全文里强调三大原则：知己知彼, 先胜后站, 至人而不至于人。很多具体章节里都是为了满足遵循这几个原则的。就像软件架构里的设计模式 solid 原则，很多具体的模式都是为了满足实现solid原则。这些原则是贯穿整体的\n基本面 战前准备的方法论：五事七计(具体看上面架构图)。\n操作面 个人收获 善战者,无智名,无勇功。\n日常中很多事情都如战争，在不同事情里又扮演者不同角色：君，将，帅，兵，民，等。其实大多人都是在平凡中度过一生的。把握好基本面，善用操作面\n尽信书不如无书","title":"孙子兵法-研习记"},{"content":"公司合作沟通 前段时间入职了新公司，说下合作上的感受\n这家公司比较传统，人员沟通也特别传统。\n传统公司典型的问题\n不开放，不分享 爱理不理 ","permalink":"https://tomorrowthief.github.io/posts/%E5%B7%A5%E4%BD%9C%E5%90%88%E4%BD%9C/","summary":"公司合作沟通 前段时间入职了新公司，说下合作上的感受\n这家公司比较传统，人员沟通也特别传统。\n传统公司典型的问题\n不开放，不分享 爱理不理 ","title":"工作合作沟通方式"},{"content":"前言 之前在公司内部做过「扩展性设计」的分享。后面重新整理形成博客形式记录自己的学习。\n由于作者长期从事Web前端领域的工作的原因，本文也是基于这些技术领域发出的一些关于应用软件方向上的扩展性总结\n什么是扩展性设计 软件架构设计里比较关注的几个要素：扩展性，稳定性，可维护性。很多领域里都会有这方面的考虑。比如：业务架构，产品架构，软件技术架构。那么具体怎么定义呢\nExtensibility is a software engineering and systems design principle where the implementation takes future growth into consideration\n扩展性是在考虑未来增长发展时所做的一些工程实践和系统设计原则\n引用自维基百科的定义\n基础理论 这里讨论的理论基础是比较原始的，类似于数学或物理中的定律定理。实践中是要结合具体场景通过组合这里理论，以及基于这些理论做些推导来形成最佳的设计\n找到变化的东西 solid原则 分层明确 常用形式 中间件 中间件是一种实践比较成熟的形式了。基本的思想是根据一些约定拦截输入，做一些逻辑，或者修改挂载上下文，然后继续向下流。具体的形式上有\n洋葱模型中间件： koa2， redux 管道化模型的中间件：pipe 中间件实践中要考虑的因素是：\n中间件收集方式 中间件之间的关系，顺序等 插件 这种形式也比较常见。类似于微内核 + plugin/addon 模型。市面上也存在了很多基于此架构的工具或框架。此模式实践中要考虑的因素是：\n隔离性：暴露主应用的那些能力，防止插件的运行影响主应用逻辑 性能：进程模型设计，是否独立进程运行 生命周期：插件加载时机，插件执行时机 插件之间管理：插件之间是否能互相调用，互相影响 插件机制思想很简单，重要的是各种实现细节，实践中有不同形式与细节。这里日后单独写一篇文章来分析\n配置 读取配置文件，读取参数都是这种形式。是一种简单但实用的形式。不过多讨论\n案例分析 webpack中的扩展性设计 webpack 是一个比较流行的打包工具。其功能的强大，生态的繁荣离不他的插件体系和loader体系。本身作为一个流程控制中心，很多功能都是分散在各个插件里来做的\nloader体系 针对特定的文件类型来做处理的，有点类似上一节提到的管道化中间件模型。针对特定类型文件可以提供多个，按照顺序管道化的处理转换。\n插件体系 webpack 内部主要的两个概念是 complier主要负责构建整体流程等，compliton主要负责构建里的具体编译工作。这两者都是通过 Tapable 库来完成内部生命周期暴露，Tapable 大体上是一种 sub-pub 模式的实现, 其核心概念 hook 可以与 event系统里的某个 event 等价。在同一个hook下可以绑定很多handler的注册，有点像AOP编程思想。\n一个插件的demo\nfunction HelloWorldPlugin(options) { // 使用 options 设置插件实例…… } HelloWorldPlugin.prototype.apply = function(compiler) { compiler.plugin(\u0026#39;done\u0026#39;, function() { console.log(\u0026#39;Hello World!\u0026#39;); }); }; module.exports = HelloWorldPlugin; 解释: 插件是约定实现带有 apply 方法的类(demo中通过构造函数和原型的方式实现)。apply 方法是 webpack 内部使用的。webpack 暴露了 complier 对象给 apply，可以使用其暴露的生命周期钩子来处理所要逻辑，完整的钩子列表可以在官网上找\nbabel 副作用 对，最大的副作用就是过度设计，无论何种设计都不是免费的。完美的扩展机制是需要考虑很多因素的，上文有一些分析。倘若为了尚不明确的问题做复杂的设计，可能得不偿失。\n总结 扩展性很重要，同时也要警惕副作用。切不可为了设计而设计，实用有效，能为公司真正带来价值的才能成为好设计。当然如果职位就是探索研究型的，可以忽略一些副作用\n个人觉得做架构的最佳实践：充分理解问题的场景，规模，特有的属性等，未来的规划，结合基础理论来做具体设计。对未来的增长不明确时，不建议花费很大成本做这些设计。\n","permalink":"https://tomorrowthief.github.io/posts/extend-design/","summary":"前言 之前在公司内部做过「扩展性设计」的分享。后面重新整理形成博客形式记录自己的学习。\n由于作者长期从事Web前端领域的工作的原因，本文也是基于这些技术领域发出的一些关于应用软件方向上的扩展性总结\n什么是扩展性设计 软件架构设计里比较关注的几个要素：扩展性，稳定性，可维护性。很多领域里都会有这方面的考虑。比如：业务架构，产品架构，软件技术架构。那么具体怎么定义呢\nExtensibility is a software engineering and systems design principle where the implementation takes future growth into consideration\n扩展性是在考虑未来增长发展时所做的一些工程实践和系统设计原则\n引用自维基百科的定义\n基础理论 这里讨论的理论基础是比较原始的，类似于数学或物理中的定律定理。实践中是要结合具体场景通过组合这里理论，以及基于这些理论做些推导来形成最佳的设计\n找到变化的东西 solid原则 分层明确 常用形式 中间件 中间件是一种实践比较成熟的形式了。基本的思想是根据一些约定拦截输入，做一些逻辑，或者修改挂载上下文，然后继续向下流。具体的形式上有\n洋葱模型中间件： koa2， redux 管道化模型的中间件：pipe 中间件实践中要考虑的因素是：\n中间件收集方式 中间件之间的关系，顺序等 插件 这种形式也比较常见。类似于微内核 + plugin/addon 模型。市面上也存在了很多基于此架构的工具或框架。此模式实践中要考虑的因素是：\n隔离性：暴露主应用的那些能力，防止插件的运行影响主应用逻辑 性能：进程模型设计，是否独立进程运行 生命周期：插件加载时机，插件执行时机 插件之间管理：插件之间是否能互相调用，互相影响 插件机制思想很简单，重要的是各种实现细节，实践中有不同形式与细节。这里日后单独写一篇文章来分析\n配置 读取配置文件，读取参数都是这种形式。是一种简单但实用的形式。不过多讨论\n案例分析 webpack中的扩展性设计 webpack 是一个比较流行的打包工具。其功能的强大，生态的繁荣离不他的插件体系和loader体系。本身作为一个流程控制中心，很多功能都是分散在各个插件里来做的\nloader体系 针对特定的文件类型来做处理的，有点类似上一节提到的管道化中间件模型。针对特定类型文件可以提供多个，按照顺序管道化的处理转换。\n插件体系 webpack 内部主要的两个概念是 complier主要负责构建整体流程等，compliton主要负责构建里的具体编译工作。这两者都是通过 Tapable 库来完成内部生命周期暴露，Tapable 大体上是一种 sub-pub 模式的实现, 其核心概念 hook 可以与 event系统里的某个 event 等价。在同一个hook下可以绑定很多handler的注册，有点像AOP编程思想。","title":"扩展性设计"},{"content":"深度思考的重要性就不多强调了，该如何做好呢？\n如何做好深度思考？\n多维度 我这里说的多维度可以理解为多视角。\n做一个技术分享，在听众的视角下如何的，主办方的视角如何，分享者的视角又如何，领导视角，同事视角如何……\n多层次 一个事物是处于整体系统里的那一层，与其他层的依赖关系。都是可以考虑的\n比如日常技术问题处理，问题本身是如何的，处理及反馈流程是如何的，技术依赖的其他系统大概如何的……\n现象与本质 有哲学基础的都会知道，事物的发展变化都会有表现与本质的区别。这一点有点像我们使用技术框架时，能掌握好框架的使用层以及底层原理，才能以正确的姿势使用。\n同样道理，思考问题的表现以及底层逻辑如何，才能做好深度思考。实际中可能会更加复杂：人的关系，系统的关系，技术本身的关系\n刻意练习 所谓学而不思则茫，有了理论基础，加上一些刻意练习，才能真正掌握。具体落地点:\n多总结 多复盘 多积累方法论 多接触不同系统的案例 ","permalink":"https://tomorrowthief.github.io/posts/deep-thinking/","summary":"深度思考的重要性就不多强调了，该如何做好呢？\n如何做好深度思考？\n多维度 我这里说的多维度可以理解为多视角。\n做一个技术分享，在听众的视角下如何的，主办方的视角如何，分享者的视角又如何，领导视角，同事视角如何……\n多层次 一个事物是处于整体系统里的那一层，与其他层的依赖关系。都是可以考虑的\n比如日常技术问题处理，问题本身是如何的，处理及反馈流程是如何的，技术依赖的其他系统大概如何的……\n现象与本质 有哲学基础的都会知道，事物的发展变化都会有表现与本质的区别。这一点有点像我们使用技术框架时，能掌握好框架的使用层以及底层原理，才能以正确的姿势使用。\n同样道理，思考问题的表现以及底层逻辑如何，才能做好深度思考。实际中可能会更加复杂：人的关系，系统的关系，技术本身的关系\n刻意练习 所谓学而不思则茫，有了理论基础，加上一些刻意练习，才能真正掌握。具体落地点:\n多总结 多复盘 多积累方法论 多接触不同系统的案例 ","title":"深度思考"},{"content":"最近开始学习蛙泳，其实很早之前下水练习过几次，但是没有系统的整理。最近开始了系统性的练习：看了些视频讲解，纠正了些错误，总算有些小进步。\n过程中发现了自己之前很多动作，模式，思考是不对的。但是纠正这些不对的点花费了很久时间。学习效率比较低。而纠正错误的技巧以及思路是一个通用的学习理论，对于工作，生活应该都适用。所以做了此快速学习新技能技巧的总结，或者称之为方法论也好。\n学习速度 掌握好正确的路径，学习资料，其余的就是练习了。理论与实践相辅相承。在实践中遇到问题，可能是理论没有吃透，可以多补充。比如不知道动作该怎么连贯（划手蹬腿结合）的时候，可以补充下理论。理论充足不等于实践也厉害，因为都有个人，环境的因素。\n所以 理论和实践结合 互相补充 来提速\n基础比较关键 最重要的基础点是：\n划手 蹬腿 协调 切记欲速不达的道理： 我之前基础练习的不够好，蹬腿，划手导致在完整动作时漏洞百出，出了问题没有头绪，然后再回过头一点一点练习基础才能做好完整动作，这个过程就比较浪费时间了。 在看专业运动员每一个细节都特别好，大概就是基础比较扎实了吧。所以想要快速达到目标，不要忽视了基础。稳扎稳打可能是速度最快的方式\n好的老师 个人在实践中总是会有很多点会偏离最优，有些思想也会偏离。有的时候会卡在某个环节出不来，这个时候如果自己有良好的资料可以参考，最好了。 比如我在呼气练习的时候，水下一直是哈气的动作，水上就不能很好的吸气了，知道看到有个解说提醒说水下吐气，才知道，这个环节练习错了。这个哈气矫正为吐气的过程是看了讲解。但是假如有个好教师帮忙点一二，可以快速解围解困惑的。\n类似的工作中也比较强调有好的导师，好的领导的重要性，所谓读万卷书不如行万里路，不过阅人无数，不如良师指点。 所以如何发现好老师？正规的学习指南，学习资料是大家当前最合适的，有真人最好了。\n最后发现总结的都是些大道理，这些大道理大家应该都懂，但是怎么与实际结合并帮助实践是比较关键的。\n总结 本文通过个人蛙泳学习过程中遇到的问题做了些反思，总结了一些快速学习技能的通用技巧方法论。并强调这些大道理如何与实际结合的技巧才是关键。希望对做其他事情有帮助，也不枉这次辛苦练习了。最后学习的过程是没有银弹的，前进吧少年\n","permalink":"https://tomorrowthief.github.io/posts/swim/","summary":"最近开始学习蛙泳，其实很早之前下水练习过几次，但是没有系统的整理。最近开始了系统性的练习：看了些视频讲解，纠正了些错误，总算有些小进步。\n过程中发现了自己之前很多动作，模式，思考是不对的。但是纠正这些不对的点花费了很久时间。学习效率比较低。而纠正错误的技巧以及思路是一个通用的学习理论，对于工作，生活应该都适用。所以做了此快速学习新技能技巧的总结，或者称之为方法论也好。\n学习速度 掌握好正确的路径，学习资料，其余的就是练习了。理论与实践相辅相承。在实践中遇到问题，可能是理论没有吃透，可以多补充。比如不知道动作该怎么连贯（划手蹬腿结合）的时候，可以补充下理论。理论充足不等于实践也厉害，因为都有个人，环境的因素。\n所以 理论和实践结合 互相补充 来提速\n基础比较关键 最重要的基础点是：\n划手 蹬腿 协调 切记欲速不达的道理： 我之前基础练习的不够好，蹬腿，划手导致在完整动作时漏洞百出，出了问题没有头绪，然后再回过头一点一点练习基础才能做好完整动作，这个过程就比较浪费时间了。 在看专业运动员每一个细节都特别好，大概就是基础比较扎实了吧。所以想要快速达到目标，不要忽视了基础。稳扎稳打可能是速度最快的方式\n好的老师 个人在实践中总是会有很多点会偏离最优，有些思想也会偏离。有的时候会卡在某个环节出不来，这个时候如果自己有良好的资料可以参考，最好了。 比如我在呼气练习的时候，水下一直是哈气的动作，水上就不能很好的吸气了，知道看到有个解说提醒说水下吐气，才知道，这个环节练习错了。这个哈气矫正为吐气的过程是看了讲解。但是假如有个好教师帮忙点一二，可以快速解围解困惑的。\n类似的工作中也比较强调有好的导师，好的领导的重要性，所谓读万卷书不如行万里路，不过阅人无数，不如良师指点。 所以如何发现好老师？正规的学习指南，学习资料是大家当前最合适的，有真人最好了。\n最后发现总结的都是些大道理，这些大道理大家应该都懂，但是怎么与实际结合并帮助实践是比较关键的。\n总结 本文通过个人蛙泳学习过程中遇到的问题做了些反思，总结了一些快速学习技能的通用技巧方法论。并强调这些大道理如何与实际结合的技巧才是关键。希望对做其他事情有帮助，也不枉这次辛苦练习了。最后学习的过程是没有银弹的，前进吧少年","title":"蛙泳学思"},{"content":"背景 最近比较空闲，在写作东西的时候发现一个不错的主题。刚好自己除了一些公共账号外，还没自己的博客，遂搭建之。\n主题：基于Hugo，详细可以见网站底部。托管于 GitHub Pages。\n博客内容 主要是搬移之前写过的一些东西，同时做了一些格式化处理。未来新写的东西应该会首先发到这里了\n菩提本无树，明镜亦非台，本来无一物，何处惹尘埃\n","permalink":"https://tomorrowthief.github.io/posts/kaishila/","summary":"背景 最近比较空闲，在写作东西的时候发现一个不错的主题。刚好自己除了一些公共账号外，还没自己的博客，遂搭建之。\n主题：基于Hugo，详细可以见网站底部。托管于 GitHub Pages。\n博客内容 主要是搬移之前写过的一些东西，同时做了一些格式化处理。未来新写的东西应该会首先发到这里了\n菩提本无树，明镜亦非台，本来无一物，何处惹尘埃","title":"文章搬运开始啦"},{"content":" 工作: 在杭州，有大小厂经历的程序员 技术: Web开发，大前端，JavaScript，Nodejs 生活: 运动(游泳，快走)，游戏(Dota2)，偶尔做饭 努力生活，开心工作中～ ","permalink":"https://tomorrowthief.github.io/about/","summary":"about","title":"About"}]